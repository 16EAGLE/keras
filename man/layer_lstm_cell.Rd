% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-rnn.R
\name{layer_lstm_cell}
\alias{layer_lstm_cell}
\title{Cell class for the LSTM layer.}
\usage{
layer_lstm_cell(
  units,
  activation = "tanh",
  recurrent_activation = "sigmoid",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  unit_forget_bias = TRUE,
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  seed = NULL,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use. Default: hyperbolic tangent
(\code{tanh}). If you pass None, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use for the recurrent step.
Default: sigmoid (\code{sigmoid}). If you pass \code{None}, no activation is
applied (ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{True}), whether the layer
should use a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{"glorot_uniform"}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation
of the recurrent state. Default: \code{"orthogonal"}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{"zeros"}.}

\item{unit_forget_bias}{Boolean (default \code{True}). If \code{True},
add 1 to the bias of the forget gate at initialization.
Setting it to \code{True} will also force \code{bias_initializer="zeros"}.
This is recommended in \href{https://github.com/mlresearch/v37/blob/gh-pages/jozefowicz15.pdf}{Jozefowicz et al.}}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{None}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{None}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{None}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{None}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{None}.}

\item{bias_constraint}{Constraint function applied to the bias vector.
Default: \code{None}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{seed}{Random seed for dropout.}
}
\description{
This class processes one step within the whole time sequence input, whereas
\code{keras.layer.LSTM} processes the whole sequence.
}
\section{Call Arguments}{
\itemize{
\item \code{inputs}: A 2D tensor, with shape \verb{(batch, features)}.
\item \code{states}: A 2D tensor with shape \verb{(batch, units)}, which is the state
from the previous time step.
\item \code{training}: Python boolean indicating whether the layer should behave in
training mode or in inference mode. Only relevant when \code{dropout} or
\code{recurrent_dropout} is used.
}
}

\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{inputs = np.random.random((32, 10, 8))
rnn = keras.layers.RNN(keras.layers.LSTMCell(4))
output = rnn(inputs)
output.shape
# (32, 4)
rnn = keras.layers.RNN(
   keras.layers.LSTMCell(4),
   return_sequences=True,
   return_state=True)
whole_sequence_output, final_state = rnn(inputs)
whole_sequence_output.shape
# (32, 10, 4)
final_state.shape
# (32, 4)
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTMCell}
}

Other recurrent layers: 
\code{\link{layer_bidirectional}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_gru_cell}()},
\code{\link{layer_gru}()},
\code{\link{layer_lstm}()},
\code{\link{layer_rnn}()},
\code{\link{layer_simple_rnn_cell}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_stacked_rnn_cells}()},
\code{\link{layer_time_distributed}()}
}
\concept{recurrent layers}
