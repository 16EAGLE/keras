% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-regularization.R
\name{layer_dropout}
\alias{layer_dropout}
\title{Applies dropout to the input.}
\usage{
layer_dropout(object, rate, noise_shape = NULL, seed = NULL, ...)
}
\arguments{
\item{rate}{Float between 0 and 1. Fraction of the input units to drop.}

\item{noise_shape}{1D integer tensor representing the shape of the
binary dropout mask that will be multiplied with the input.
For instance, if your inputs have shape
\verb{(batch_size, timesteps, features)} and
you want the dropout mask to be the same for all timesteps,
you can use \verb{noise_shape=(batch_size, 1, features)}.}

\item{seed}{A Python integer to use as random seed.}
}
\description{
The \code{Dropout} layer randomly sets input units to 0 with a frequency of
\code{rate} at each step during training time, which helps prevent overfitting.
Inputs not set to 0 are scaled up by \code{1 / (1 - rate)} such that the sum over
all inputs is unchanged.

Note that the \code{Dropout} layer only applies when \code{training} is set to \code{True}
in \code{call()}, such that no values are dropped during inference.
When using \code{model.fit}, \code{training} will be appropriately set to \code{True}
automatically. In other contexts, you can set the argument explicitly
to \code{True} when calling the layer.

(This is in contrast to setting \code{trainable=False} for a \code{Dropout} layer.
\code{trainable} does not affect the layer's behavior, as \code{Dropout} does
not have any variables/weights that can be frozen during training.)
}
\section{Call Arguments}{
\itemize{
\item \code{inputs}: Input tensor (of any rank).
\item \code{training}: Python boolean indicating whether the layer should behave in
training mode (adding dropout) or in inference mode (doing nothing).
}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dropout}
}

Other regularization layers: 
\code{\link{layer_activity_regularization}()},
\code{\link{layer_gaussian_dropout}()},
\code{\link{layer_gaussian_noise}()},
\code{\link{layer_spatial_dropout_1d}()},
\code{\link{layer_spatial_dropout_2d}()},
\code{\link{layer_spatial_dropout_3d}()}
}
\concept{regularization layers}
