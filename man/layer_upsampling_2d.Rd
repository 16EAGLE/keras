% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-reshaping.R
\name{layer_upsampling_2d}
\alias{layer_upsampling_2d}
\title{Upsampling layer for 2D inputs.}
\usage{
layer_upsampling_2d(
  object,
  size = list(2L, 2L),
  data_format = NULL,
  interpolation = "nearest",
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{size}{Int, or list of 2 integers.
The upsampling factors for rows and columns.}

\item{data_format}{A string,
one of \code{"channels_last"} (default) or \code{"channels_first"}.
The ordering of the dimensions in the inputs.
\code{"channels_last"} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{"channels_first"}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json} (if exists) else \code{"channels_last"}.
Defaults to \code{"channels_last"}.}

\item{interpolation}{A string, one of \code{"bicubic"}, \code{"bilinear"}, \code{"lanczos3"},
\code{"lanczos5"}, \code{"nearest"}.}

\item{...}{Passed on to the Python callable}
}
\description{
The implementation uses interpolative resizing, given the resize method
(specified by the \code{interpolation} argument). Use \code{interpolation=nearest}
to repeat the rows and columns of the data.
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{input_shape <- c(2, 2, 1, 3)
x <- k_reshape(seq_len(prod(input_shape)), input_shape)
print(x)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## tf.Tensor(
## [[[[ 1  2  3]]
##
##   [[ 4  5  6]]]
##
##
##  [[[ 7  8  9]]
##
##   [[10 11 12]]]], shape=(2, 2, 1, 3), dtype=int64)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{y <- layer_upsampling_2d(x, size = c(1, 2))
print(y)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## tf.Tensor(
## [[[[ 1  2  3]
##    [ 1  2  3]]
##
##   [[ 4  5  6]
##    [ 4  5  6]]]
##
##
##  [[[ 7  8  9]
##    [ 7  8  9]]
##
##   [[10 11 12]
##    [10 11 12]]]], shape=(2, 2, 2, 3), dtype=int64)
}\if{html}{\out{</div>}}
}

\section{Input Shape}{
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, rows, cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, rows, cols)}
}
}

\section{Output Shape}{
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, upsampled_rows, upsampled_cols, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, upsampled_rows, upsampled_cols)}
}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/reshaping_layers/up_sampling2d#upsampling2d-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/UpSampling2D}
}

Other reshaping layers: 
\code{\link{layer_cropping_1d}()},
\code{\link{layer_cropping_2d}()},
\code{\link{layer_cropping_3d}()},
\code{\link{layer_flatten}()},
\code{\link{layer_permute}()},
\code{\link{layer_repeat_vector}()},
\code{\link{layer_reshape}()},
\code{\link{layer_upsampling_1d}()},
\code{\link{layer_upsampling_3d}()},
\code{\link{layer_zero_padding_1d}()},
\code{\link{layer_zero_padding_2d}()},
\code{\link{layer_zero_padding_3d}()}
}
\concept{reshaping layers}
