% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-rnn.R
\name{layer_lstm}
\alias{layer_lstm}
\title{Long Short-Term Memory layer - Hochreiter 1997.}
\usage{
layer_lstm(
  object,
  units,
  activation = "tanh",
  recurrent_activation = "sigmoid",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  unit_forget_bias = TRUE,
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  seed = NULL,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}).
If you pass \code{NULL}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use
for the recurrent step.
Default: sigmoid (\code{sigmoid}).
If you pass \code{NULL}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{TRUE}), whether the layer
should use a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{"glorot_uniform"}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation of the recurrent
state. Default: \code{"orthogonal"}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{"zeros"}.}

\item{unit_forget_bias}{Boolean (default \code{TRUE}). If \code{TRUE},
add 1 to the bias of the forget gate at initialization.
Setting it to \code{TRUE} will also force \code{bias_initializer="zeros"}.
This is recommended in \href{https://github.com/mlresearch/v37/blob/gh-pages/jozefowicz15.pdf}{Jozefowicz et al.}}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector.
Default: \code{NULL}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{seed}{Random seed for dropout.}

\item{return_sequences}{Boolean. Whether to return the last output
in the output sequence, or the full sequence. Default: \code{FALSE}.}

\item{return_state}{Boolean. Whether to return the last state in addition
to the output. Default: \code{FALSE}.}

\item{go_backwards}{Boolean (default: \code{FALSE}).
If \code{TRUE}, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default: \code{FALSE}). If \code{TRUE}, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default \code{FALSE}).
If \code{TRUE}, the network will be unrolled,
else a symbolic loop will be used.
Unrolling can speed-up a RNN,
although it tends to be more memory-intensive.
Unrolling is only suitable for short sequences.}

\item{...}{For forward/backward compatability.}
}
\description{
Based on available runtime hardware and constraints, this layer
will choose different implementations (cuDNN-based or backend-native)
to maximize the performance. If a GPU is available and all
the arguments to the layer meet the requirement of the cuDNN kernel
(see below for details), the layer will use a fast cuDNN implementation
when using the TensorFlow backend.
The requirements to use the cuDNN implementation are:
\enumerate{
\item \code{activation} == \code{tanh}
\item \code{recurrent_activation} == \code{sigmoid}
\item \code{dropout} == 0 and \code{recurrent_dropout} == 0
\item \code{unroll} is \code{FALSE}
\item \code{use_bias} is \code{TRUE}
\item Inputs, if use masking, are strictly right-padded.
\item Eager execution is enabled in the outermost context.
}

For example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{input <- random_uniform(c(32, 10, 8))
output <- input |> layer_lstm(4)
shape(output)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## shape(32, 4)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{lstm <- layer_lstm(units = 4, return_sequences = TRUE, return_state = TRUE)
c(whole_seq_output, final_memory_state, final_carry_state) \%<-\% lstm(input)
shape(whole_seq_output)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## shape(32, 10, 4)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{shape(final_memory_state)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## shape(32, 4)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{shape(final_carry_state)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## shape(32, 4)
}\if{html}{\out{</div>}}
}
\section{Call Arguments}{
\itemize{
\item \code{inputs}: A 3D tensor, with shape \verb{(batch, timesteps, feature)}.
\item \code{mask}: Binary tensor of shape \verb{(samples, timesteps)} indicating whether
a given timestep should be masked  (optional).
An individual \code{TRUE} entry indicates that the corresponding timestep
should be utilized, while a \code{FALSE} entry indicates that the
corresponding timestep should be ignored. Defaults to \code{NULL}.
\item \code{training}: Boolean indicating whether the layer should behave in
training mode or in inference mode. This argument is passed to the
cell when calling it. This is only relevant if \code{dropout} or
\code{recurrent_dropout} is used  (optional). Defaults to \code{NULL}.
\item \code{initial_state}: List of initial state tensors to be passed to the first
call of the cell (optional, \code{NULL} causes creation
of zero-filled initial state tensors). Defaults to \code{NULL}.
}
}

\seealso{
\itemize{
\item \url{https://keras.io/api/layers/recurrent_layers/lstm#lstm-class}
}

Other lstm rnn layers: 
\code{\link{rnn_cell_lstm}()}

Other rnn layers: 
\code{\link{layer_bidirectional}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_gru}()},
\code{\link{layer_rnn}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_time_distributed}()},
\code{\link{rnn_cell_gru}()},
\code{\link{rnn_cell_lstm}()},
\code{\link{rnn_cell_simple}()},
\code{\link{rnn_cells_stack}()}

Other layers: 
\code{\link{Layer}()},
\code{\link{layer_activation}()},
\code{\link{layer_activation_elu}()},
\code{\link{layer_activation_leaky_relu}()},
\code{\link{layer_activation_parametric_relu}()},
\code{\link{layer_activation_relu}()},
\code{\link{layer_activation_softmax}()},
\code{\link{layer_activity_regularization}()},
\code{\link{layer_add}()},
\code{\link{layer_additive_attention}()},
\code{\link{layer_attention}()},
\code{\link{layer_average}()},
\code{\link{layer_average_pooling_1d}()},
\code{\link{layer_average_pooling_2d}()},
\code{\link{layer_average_pooling_3d}()},
\code{\link{layer_batch_normalization}()},
\code{\link{layer_bidirectional}()},
\code{\link{layer_category_encoding}()},
\code{\link{layer_center_crop}()},
\code{\link{layer_concatenate}()},
\code{\link{layer_conv_1d}()},
\code{\link{layer_conv_1d_transpose}()},
\code{\link{layer_conv_2d}()},
\code{\link{layer_conv_2d_transpose}()},
\code{\link{layer_conv_3d}()},
\code{\link{layer_conv_3d_transpose}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_cropping_1d}()},
\code{\link{layer_cropping_2d}()},
\code{\link{layer_cropping_3d}()},
\code{\link{layer_dense}()},
\code{\link{layer_depthwise_conv_1d}()},
\code{\link{layer_depthwise_conv_2d}()},
\code{\link{layer_discretization}()},
\code{\link{layer_dot}()},
\code{\link{layer_dropout}()},
\code{\link{layer_einsum_dense}()},
\code{\link{layer_embedding}()},
\code{\link{layer_feature_space}()},
\code{\link{layer_flatten}()},
\code{\link{layer_gaussian_dropout}()},
\code{\link{layer_gaussian_noise}()},
\code{\link{layer_global_average_pooling_1d}()},
\code{\link{layer_global_average_pooling_2d}()},
\code{\link{layer_global_average_pooling_3d}()},
\code{\link{layer_global_max_pooling_1d}()},
\code{\link{layer_global_max_pooling_2d}()},
\code{\link{layer_global_max_pooling_3d}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_group_query_attention}()},
\code{\link{layer_gru}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_identity}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_lambda}()},
\code{\link{layer_layer_normalization}()},
\code{\link{layer_masking}()},
\code{\link{layer_max_pooling_1d}()},
\code{\link{layer_max_pooling_2d}()},
\code{\link{layer_max_pooling_3d}()},
\code{\link{layer_maximum}()},
\code{\link{layer_minimum}()},
\code{\link{layer_multi_head_attention}()},
\code{\link{layer_multiply}()},
\code{\link{layer_normalization}()},
\code{\link{layer_permute}()},
\code{\link{layer_random_brightness}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_rotation}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_repeat_vector}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_reshape}()},
\code{\link{layer_resizing}()},
\code{\link{layer_rnn}()},
\code{\link{layer_separable_conv_1d}()},
\code{\link{layer_separable_conv_2d}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_spatial_dropout_1d}()},
\code{\link{layer_spatial_dropout_2d}()},
\code{\link{layer_spatial_dropout_3d}()},
\code{\link{layer_spectral_normalization}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_subtract}()},
\code{\link{layer_text_vectorization}()},
\code{\link{layer_tfsm}()},
\code{\link{layer_time_distributed}()},
\code{\link{layer_torch_module_wrapper}()},
\code{\link{layer_unit_normalization}()},
\code{\link{layer_upsampling_1d}()},
\code{\link{layer_upsampling_2d}()},
\code{\link{layer_upsampling_3d}()},
\code{\link{layer_zero_padding_1d}()},
\code{\link{layer_zero_padding_2d}()},
\code{\link{layer_zero_padding_3d}()},
\code{\link{rnn_cell_gru}()},
\code{\link{rnn_cell_lstm}()},
\code{\link{rnn_cell_simple}()},
\code{\link{rnn_cells_stack}()}
}
\concept{layers}
\concept{lstm rnn layers}
\concept{rnn layers}
