% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-rnn.R
\name{layer_lstm}
\alias{layer_lstm}
\title{Long Short-Term Memory layer - Hochreiter 1997.}
\usage{
layer_lstm(
  object,
  units,
  activation = "tanh",
  recurrent_activation = "sigmoid",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  unit_forget_bias = TRUE,
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  seed = NULL,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}).
If you pass \code{None}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use
for the recurrent step.
Default: sigmoid (\code{sigmoid}).
If you pass \code{None}, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{True}), whether the layer
should use a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{"glorot_uniform"}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation of the recurrent
state. Default: \code{"orthogonal"}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{"zeros"}.}

\item{unit_forget_bias}{Boolean (default \code{True}). If \code{True},
add 1 to the bias of the forget gate at initialization.
Setting it to \code{True} will also force \code{bias_initializer="zeros"}.
This is recommended in \href{https://github.com/mlresearch/v37/blob/gh-pages/jozefowicz15.pdf}{Jozefowicz et al.}}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{None}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{None}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{None}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{None}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{None}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{None}.}

\item{bias_constraint}{Constraint function applied to the bias vector.
Default: \code{None}.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state. Default: 0.}

\item{seed}{Random seed for dropout.}

\item{return_sequences}{Boolean. Whether to return the last output
in the output sequence, or the full sequence. Default: \code{False}.}

\item{return_state}{Boolean. Whether to return the last state in addition
to the output. Default: \code{False}.}

\item{go_backwards}{Boolean (default: \code{False}).
If \code{True}, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default: \code{False}). If \code{True}, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default False).
If \code{True}, the network will be unrolled,
else a symbolic loop will be used.
Unrolling can speed-up a RNN,
although it tends to be more memory-intensive.
Unrolling is only suitable for short sequences.}
}
\description{
Based on available runtime hardware and constraints, this layer
will choose different implementations (cuDNN-based or backend-native)
to maximize the performance. If a GPU is available and all
the arguments to the layer meet the requirement of the cuDNN kernel
(see below for details), the layer will use a fast cuDNN implementation
when using the TensorFlow backend.
The requirements to use the cuDNN implementation are:
\enumerate{
\item \code{activation} == \code{tanh}
\item \code{recurrent_activation} == \code{sigmoid}
\item \code{dropout} == 0 and \code{recurrent_dropout} == 0
\item \code{unroll} is \code{False}
\item \code{use_bias} is \code{True}
\item Inputs, if use masking, are strictly right-padded.
\item Eager execution is enabled in the outermost context.
}

For example:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{inputs = np.random.random((32, 10, 8))
lstm = keras_core.layers.LSTM(4)
output = lstm(inputs)
output.shape
# (32, 4)
lstm = keras_core.layers.LSTM(
    4, return_sequences=True, return_state=True)
whole_seq_output, final_memory_state, final_carry_state = lstm(inputs)
whole_seq_output.shape
# (32, 10, 4)
final_memory_state.shape
# (32, 4)
final_carry_state.shape
# (32, 4)
}\if{html}{\out{</div>}}
}
\section{Call Arguments}{
inputs: A 3D tensor, with shape \verb{(batch, timesteps, feature)}.
mask: Binary tensor of shape \verb{(samples, timesteps)} indicating whether
a given timestep should be masked  (optional).
An individual \code{True} entry indicates that the corresponding timestep
should be utilized, while a \code{False} entry indicates that the
corresponding timestep should be ignored. Defaults to \code{None}.
training: Python boolean indicating whether the layer should behave in
training mode or in inference mode. This argument is passed to the
cell when calling it. This is only relevant if \code{dropout} or
\code{recurrent_dropout} is used  (optional). Defaults to \code{None}.
initial_state: List of initial state tensors to be passed to the first
call of the cell (optional, \code{None} causes creation
of zero-filled initial state tensors). Defaults to \code{None}.
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTM}
}

Other recurrent layers: 
\code{\link{layer_bidirectional}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_gru_cell}()},
\code{\link{layer_gru}()},
\code{\link{layer_lstm_cell}()},
\code{\link{layer_rnn}()},
\code{\link{layer_simple_rnn_cell}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_stacked_rnn_cells}()},
\code{\link{layer_time_distributed}()}
}
\concept{recurrent layers}
