% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-layers-normalization.R,
%   R/layers-normalization.R
\name{layer_spectral_normalization}
\alias{layer_spectral_normalization}
\title{Performs spectral normalization on the weights of a target layer.}
\usage{
layer_spectral_normalization(object, layer, power_iterations = 1L, ...)

layer_spectral_normalization(object, layer, power_iterations = 1L, ...)
}
\arguments{
\item{layer}{A \code{keras_core.layers.Layer} instance that
has either a \code{kernel} (e.g. \code{Conv2D}, \code{Dense}...)
or an \code{embeddings} attribute (\code{Embedding} layer).}

\item{power_iterations}{int, the number of iterations during normalization.}

\item{...}{Base wrapper keyword arguments.}
}
\description{
This wrapper controls the Lipschitz constant of the weights of a layer by
constraining their spectral norm, which can stabilize the training of GANs.

This wrapper controls the Lipschitz constant of the weights of a layer by
constraining their spectral norm, which can stabilize the training of GANs.
}
\section{Examples}{
Wrap \code{keras_core.layers.Conv2D}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{x = np.random.rand(1, 10, 10, 1)
conv2d = SpectralNormalization(keras_core.layers.Conv2D(2, 2))
y = conv2d(x)
y.shape
# (1, 9, 9, 2)
}\if{html}{\out{</div>}}

Wrap \code{keras_core.layers.Dense}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{x = np.random.rand(1, 10, 10, 1)
dense = SpectralNormalization(keras_core.layers.Dense(10))
y = dense(x)
y.shape
# (1, 10, 10, 10)
}\if{html}{\out{</div>}}

Wrap \code{keras_core.layers.Conv2D}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{x = np.random.rand(1, 10, 10, 1)
conv2d = SpectralNormalization(keras_core.layers.Conv2D(2, 2))
y = conv2d(x)
y.shape
# (1, 9, 9, 2)
}\if{html}{\out{</div>}}

Wrap \code{keras_core.layers.Dense}:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{x = np.random.rand(1, 10, 10, 1)
dense = SpectralNormalization(keras_core.layers.Dense(10))
y = dense(x)
y.shape
# (1, 10, 10, 10)
}\if{html}{\out{</div>}}
}

\section{Reference}{
\itemize{
\item \href{https://arxiv.org/abs/1802.05957}{Spectral Normalization for GAN}.
}

\itemize{
\item \href{https://arxiv.org/abs/1802.05957}{Spectral Normalization for GAN}.
}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/SpectralNormalization}
}

\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/SpectralNormalization}
}

Other normalization layers: 
\code{\link{layer_batch_normalization}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_layer_normalization}()},
\code{\link{layer_unit_normalization}()}

Other normalization layers: 
\code{\link{layer_batch_normalization}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_layer_normalization}()},
\code{\link{layer_unit_normalization}()}
}
\concept{normalization layers}
