% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-attention.R
\name{layer_group_query_attention}
\alias{layer_group_query_attention}
\title{Grouped Query Attention layer.}
\usage{
layer_group_query_attention(
  object,
  head_dim,
  num_query_heads,
  num_key_value_heads,
  dropout = 0,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{head_dim}{Size of each attention head.}

\item{num_query_heads}{Number of query attention heads.}

\item{num_key_value_heads}{Number of key and value attention heads.}

\item{dropout}{Dropout probability.}

\item{use_bias}{Boolean, whether the dense layers use bias vectors/matrices.}

\item{kernel_initializer}{Initializer for dense layer kernels.}

\item{bias_initializer}{Initializer for dense layer biases.}

\item{kernel_regularizer}{Regularizer for dense layer kernels.}

\item{bias_regularizer}{Regularizer for dense layer biases.}

\item{activity_regularizer}{Regularizer for dense layer activity.}

\item{kernel_constraint}{Constraint for dense layer kernels.}

\item{bias_constraint}{Constraint for dense layer kernels.}

\item{...}{Passed on to the Python callable}
}
\value{
attention_output: Result of the computation, of shape
\verb{(batch_dim, target_seq_len, feature_dim)}, where \code{target_seq_len}
is for target sequence length and \code{feature_dim} is the query input
last dim.
attention_scores: (Optional) attention coefficients of shape
\verb{(batch_dim, num_query_heads, target_seq_len, source_seq_len)}.
}
\description{
This is an implementation of grouped-query attention introduced by
\href{https://arxiv.org/abs/2305.13245}{Ainslie et al., 2023}. Here
\code{num_key_value_heads} denotes number of groups, setting
\code{num_key_value_heads} to 1 is equivalent to multi-query attention, and
when \code{num_key_value_heads} is equal to \code{num_query_heads} it is equivalent
to multi-head attention.

This layer first projects \code{query}, \code{key}, and \code{value} tensors. Then, \code{key}
and \code{value} are repeated to match the number of heads of \code{query}.

Then, the \code{query} is scaled and dot-producted with \code{key} tensors. These are
softmaxed to obtain attention probabilities. The value tensors are then
interpolated by these probabilities and concatenated back to a single
tensor.
}
\section{Call Arguments}{
\itemize{
\item \code{query}: Query tensor of shape \verb{(batch_dim, target_seq_len, feature_dim)},
where \code{batch_dim} is batch size, \code{target_seq_len} is the length of
target sequence, and \code{feature_dim} is dimension of feature.
\item \code{value}: Value tensor of shape \verb{(batch_dim, source_seq_len, feature_dim)},
where \code{batch_dim} is batch size, \code{source_seq_len} is the length of
source sequence, and \code{feature_dim} is dimension of feature.
\item \code{key}: Optional key tensor of shape
\verb{(batch_dim, source_seq_len, feature_dim)}. If not given, will use
\code{value} for both \code{key} and \code{value}, which is most common case.
\item \code{attention_mask}: A boolean mask of shape
\verb{(batch_dim, target_seq_len, source_seq_len)}, that prevents
attention to certain positions. The boolean mask specifies which
query elements can attend to which key elements, where 1 indicates
attention and 0 indicates no attention. Broadcasting can happen for
the missing batch dimensions and the head dimension.
\item \code{return_attention_scores}: A boolean to indicate whether the output
should be \verb{(attention_output, attention_scores)} if \code{True}, or
\code{attention_output} if \code{False}. Defaults to \code{False}.
\item \code{training}: Python boolean indicating whether the layer should behave in
training mode (adding dropout) or in inference mode (no dropout).
Will go with either using the training mode of the parent
layer/model or \code{False} (inference) if there is no parent layer.
\item \code{use_causal_mask}: A boolean to indicate whether to apply a causal mask to
prevent tokens from attending to future tokens (e.g., used in a
decoder Transformer).
}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/GroupQueryAttention}
}

Other attention layers: 
\code{\link{layer_additive_attention}()},
\code{\link{layer_attention}()},
\code{\link{layer_multi_head_attention}()}
}
\concept{attention layers}
