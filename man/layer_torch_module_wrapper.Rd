% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-utils.R
\name{layer_torch_module_wrapper}
\alias{layer_torch_module_wrapper}
\title{Torch module wrapper layer.}
\usage{
layer_torch_module_wrapper(object, module, name = NULL, ...)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{module}{\code{torch.nn.Module} instance. If it's a \code{LazyModule}
instance, then its parameters must be initialized before
passing the instance to \code{layer_torch_module_wrapper} (e.g. by calling
it once).}

\item{name}{The name of the layer (string).}

\item{...}{Passed on to the Python callable}
}
\description{
\code{layer_torch_module_wrapper} is a wrapper class that can turn any
\code{torch.nn.Module} into a Keras layer, in particular by making its
parameters trackable by Keras.
}
\section{Examples}{
Here's an example of how the \code{layer_torch_module_wrapper} can be used with vanilla
PyTorch modules.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{torch <- import("torch")
nn <- import("torch.nn")
nnf <- import("torch.nn.functional")

Classifier(keras$Model) \%py_class\% \{

  initialize <- function(...) \{
    super$initialize(...)

    self$conv1 <- layer_torch_module_wrapper(module = nn$Conv2d(
      in_channels=1L, out_channels=32L, kernel_size=c(3L, 3L)
    ))
    self$conv2 <- layer_torch_module_wrapper(module = nn$Conv2d(
      in_channels=32L, out_channels=64L, kernel_size=c(3L, 3L)
    ))
    self$pool <- nn$MaxPool2d(kernel_size=c(2L, 2L))
    self$flatten <- nn$Flatten()
    self$dropout <- nn$Dropout(p=0.5)
    self$fc <- layer_torch_module_wrapper(module = nn$Linear(
      1600L, 10L
    ))
  \}

  call <- function(inputs) \{
    x <- nnf$relu(self$conv1(inputs))
    x <- self$pool(x)
    x <- nnf$relu(self$conv2(x))
    x <- self$pool(x)
    x <- self$flatten(x)
    x <- self$dropout(x)
    x <- self$fc(x)
    nnf$softmax(x, dim=1L)
  \}

\}

model <- Classifier()
model$build(shape(1, 28, 28))
print("Output shape:", model(torch$ones(shape(1L, 1L, 28L, 28L))))

model \%>\% compile(
    loss="sparse_categorical_crossentropy",
    optimizer="adam",
    metrics="accuracy"
)
model \%>\% fit(train_loader, epochs=5)
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/TorchModuleWrapper}
}

Other utils: 
\code{\link{audio_dataset_from_directory}()},
\code{\link{clear_session}()},
\code{\link{config_disable_interactive_logging}()},
\code{\link{config_disable_traceback_filtering}()},
\code{\link{config_enable_interactive_logging}()},
\code{\link{config_enable_traceback_filtering}()},
\code{\link{config_is_interactive_logging_enabled}()},
\code{\link{config_is_traceback_filtering_enabled}()},
\code{\link{get_custom_objects}()},
\code{\link{get_file}()},
\code{\link{get_registered_name}()},
\code{\link{get_registered_object}()},
\code{\link{get_source_inputs}()},
\code{\link{image_array_save}()},
\code{\link{image_dataset_from_directory}()},
\code{\link{image_from_array}()},
\code{\link{image_load}()},
\code{\link{image_smart_resize}()},
\code{\link{image_to_array}()},
\code{\link{layer_feature_space}()},
\code{\link{model_to_dot}()},
\code{\link{normalize}()},
\code{\link{pack_x_y_sample_weight}()},
\code{\link{pad_sequences}()},
\code{\link{set_random_seed}()},
\code{\link{split_dataset}()},
\code{\link{text_dataset_from_directory}()},
\code{\link{timeseries_dataset_from_array}()},
\code{\link{to_categorical}()},
\code{\link{unpack_x_y_sample_weight}()}
}
\concept{utils}
