% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-torch-wrapper.R
\name{layer_torch_module_wrapper}
\alias{layer_torch_module_wrapper}
\title{Torch module wrapper layer.}
\usage{
layer_torch_module_wrapper(object, module, name = NULL, ...)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{module}{\code{torch.nn.Module} instance. If it's a \code{LazyModule}
instance, then its parameters must be initialized before
passing the instance to \code{layer_torch_module_wrapper} (e.g. by calling
it once).}

\item{name}{The name of the layer (string).}

\item{...}{For forward/backward compatability.}
}
\description{
\code{layer_torch_module_wrapper} is a wrapper class that can turn any
\code{torch.nn.Module} into a Keras layer, in particular by making its
parameters trackable by Keras.
}
\section{Examples}{
Here's an example of how the \code{\link[=layer_torch_module_wrapper]{layer_torch_module_wrapper()}} can be used with vanilla
PyTorch modules.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# reticulate::py_install(
#   packages = c("torch", "torchvision", "torchaudio"),
#   envname = "r-keras",
#   pip_options = c("--index-url https://download.pytorch.org/whl/cpu")
# )
library(keras3)
use_backend("torch")
torch <- reticulate::import("torch")
nn <- reticulate::import("torch.nn")
nnf <- reticulate::import("torch.nn.functional")

Classifier(keras$Model) \\\%py_class\\\% \{
  initialize <- function(...) \{
    super$initialize(...)

    self$conv1 <- layer_torch_module_wrapper(module = nn$Conv2d(
      in_channels = 1L,
      out_channels = 32L,
      kernel_size = tuple(3L, 3L)
    ))
    self$conv2 <- layer_torch_module_wrapper(module = nn$Conv2d(
      in_channels = 32L,
      out_channels = 64L,
      kernel_size = tuple(3L, 3L)
    ))
    self$pool <- nn$MaxPool2d(kernel_size = tuple(2L, 2L))
    self$flatten <- nn$Flatten()
    self$dropout <- nn$Dropout(p = 0.5)
    self$fc <-
      layer_torch_module_wrapper(module = nn$Linear(1600L, 10L))
  \}

  call <- function(inputs) \{
    x <- nnf$relu(self$conv1(inputs))
    x <- self$pool(x)
    x <- nnf$relu(self$conv2(x))
    x <- self$pool(x)
    x <- self$flatten(x)
    x <- self$dropout(x)
    x <- self$fc(x)
    nnf$softmax(x, dim = 1L)
  \}
\}
model <- Classifier()
model$build(shape(1, 28, 28))
cat("Output shape:", format(shape(model(torch$ones(1L, 1L, 28L, 28L)))))

model |> compile(loss = "sparse_categorical_crossentropy",
                 optimizer = "adam",
                 metrics = "accuracy")
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{model |> fit(train_loader, epochs = 5)
}\if{html}{\out{</div>}}
}

\seealso{
Other utils: 
\code{\link{audio_dataset_from_directory}()},
\code{\link{clear_session}()},
\code{\link{config_disable_interactive_logging}()},
\code{\link{config_disable_traceback_filtering}()},
\code{\link{config_enable_interactive_logging}()},
\code{\link{config_enable_traceback_filtering}()},
\code{\link{config_is_interactive_logging_enabled}()},
\code{\link{config_is_traceback_filtering_enabled}()},
\code{\link{get_file}()},
\code{\link{get_source_inputs}()},
\code{\link{image_array_save}()},
\code{\link{image_dataset_from_directory}()},
\code{\link{image_from_array}()},
\code{\link{image_load}()},
\code{\link{image_smart_resize}()},
\code{\link{image_to_array}()},
\code{\link{layer_feature_space}()},
\code{\link{normalize}()},
\code{\link{pack_x_y_sample_weight}()},
\code{\link{pad_sequences}()},
\code{\link{set_random_seed}()},
\code{\link{split_dataset}()},
\code{\link{text_dataset_from_directory}()},
\code{\link{timeseries_dataset_from_array}()},
\code{\link{to_categorical}()},
\code{\link{unpack_x_y_sample_weight}()},
\code{\link{zip_lists}()}

Other layers: 
\code{\link{Layer}()},
\code{\link{layer_activation}()},
\code{\link{layer_activation_elu}()},
\code{\link{layer_activation_leaky_relu}()},
\code{\link{layer_activation_parametric_relu}()},
\code{\link{layer_activation_relu}()},
\code{\link{layer_activation_softmax}()},
\code{\link{layer_activity_regularization}()},
\code{\link{layer_add}()},
\code{\link{layer_additive_attention}()},
\code{\link{layer_alpha_dropout}()},
\code{\link{layer_attention}()},
\code{\link{layer_average}()},
\code{\link{layer_average_pooling_1d}()},
\code{\link{layer_average_pooling_2d}()},
\code{\link{layer_average_pooling_3d}()},
\code{\link{layer_batch_normalization}()},
\code{\link{layer_bidirectional}()},
\code{\link{layer_category_encoding}()},
\code{\link{layer_center_crop}()},
\code{\link{layer_concatenate}()},
\code{\link{layer_conv_1d}()},
\code{\link{layer_conv_1d_transpose}()},
\code{\link{layer_conv_2d}()},
\code{\link{layer_conv_2d_transpose}()},
\code{\link{layer_conv_3d}()},
\code{\link{layer_conv_3d_transpose}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_cropping_1d}()},
\code{\link{layer_cropping_2d}()},
\code{\link{layer_cropping_3d}()},
\code{\link{layer_dense}()},
\code{\link{layer_depthwise_conv_1d}()},
\code{\link{layer_depthwise_conv_2d}()},
\code{\link{layer_discretization}()},
\code{\link{layer_dot}()},
\code{\link{layer_dropout}()},
\code{\link{layer_einsum_dense}()},
\code{\link{layer_embedding}()},
\code{\link{layer_feature_space}()},
\code{\link{layer_flatten}()},
\code{\link{layer_gaussian_dropout}()},
\code{\link{layer_gaussian_noise}()},
\code{\link{layer_global_average_pooling_1d}()},
\code{\link{layer_global_average_pooling_2d}()},
\code{\link{layer_global_average_pooling_3d}()},
\code{\link{layer_global_max_pooling_1d}()},
\code{\link{layer_global_max_pooling_2d}()},
\code{\link{layer_global_max_pooling_3d}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_group_query_attention}()},
\code{\link{layer_gru}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_identity}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_lambda}()},
\code{\link{layer_layer_normalization}()},
\code{\link{layer_lstm}()},
\code{\link{layer_masking}()},
\code{\link{layer_max_pooling_1d}()},
\code{\link{layer_max_pooling_2d}()},
\code{\link{layer_max_pooling_3d}()},
\code{\link{layer_maximum}()},
\code{\link{layer_minimum}()},
\code{\link{layer_multi_head_attention}()},
\code{\link{layer_multiply}()},
\code{\link{layer_normalization}()},
\code{\link{layer_permute}()},
\code{\link{layer_random_brightness}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_rotation}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_repeat_vector}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_reshape}()},
\code{\link{layer_resizing}()},
\code{\link{layer_rnn}()},
\code{\link{layer_separable_conv_1d}()},
\code{\link{layer_separable_conv_2d}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_spatial_dropout_1d}()},
\code{\link{layer_spatial_dropout_2d}()},
\code{\link{layer_spatial_dropout_3d}()},
\code{\link{layer_spectral_normalization}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_subtract}()},
\code{\link{layer_text_vectorization}()},
\code{\link{layer_tfsm}()},
\code{\link{layer_time_distributed}()},
\code{\link{layer_unit_normalization}()},
\code{\link{layer_upsampling_1d}()},
\code{\link{layer_upsampling_2d}()},
\code{\link{layer_upsampling_3d}()},
\code{\link{layer_zero_padding_1d}()},
\code{\link{layer_zero_padding_2d}()},
\code{\link{layer_zero_padding_3d}()},
\code{\link{rnn_cell_gru}()},
\code{\link{rnn_cell_lstm}()},
\code{\link{rnn_cell_simple}()},
\code{\link{rnn_cells_stack}()}
}
\concept{layers}
\concept{utils}
