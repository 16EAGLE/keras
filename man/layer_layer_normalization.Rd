% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-normalization.R
\name{layer_layer_normalization}
\alias{layer_layer_normalization}
\title{Layer normalization layer (Ba et al., 2016).}
\usage{
layer_layer_normalization(
  object,
  axis = -1L,
  epsilon = 0.001,
  center = TRUE,
  scale = TRUE,
  rms_scaling = FALSE,
  beta_initializer = "zeros",
  gamma_initializer = "ones",
  beta_regularizer = NULL,
  gamma_regularizer = NULL,
  beta_constraint = NULL,
  gamma_constraint = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{axis}{Integer or list. The axis or axes to normalize across.
Typically, this is the features axis/axes. The left-out axes are
typically the batch axis/axes. \code{-1} is the last dimension in the
input. Defaults to \code{-1}.}

\item{epsilon}{Small float added to variance to avoid dividing by zero.
Defaults to 1e-3.}

\item{center}{If \code{TRUE}, add offset of \code{beta} to normalized tensor. If \code{FALSE},
\code{beta} is ignored. Defaults to \code{TRUE}.}

\item{scale}{If \code{TRUE}, multiply by \code{gamma}. If \code{FALSE}, \code{gamma} is not used.
When the next layer is linear (also e.g. \code{layer_activation_relu()}), this can be
disabled since the scaling will be done by the next layer.
Defaults to \code{TRUE}.}

\item{rms_scaling}{If \code{TRUE}, \code{center} and \code{scale} are ignored, and the
inputs are scaled by \code{gamma} and the inverse square root
of the square of all inputs. This is an approximate and faster
approach that avoids ever computing the mean of the input.}

\item{beta_initializer}{Initializer for the beta weight. Defaults to zeros.}

\item{gamma_initializer}{Initializer for the gamma weight. Defaults to ones.}

\item{beta_regularizer}{Optional regularizer for the beta weight.
\code{NULL} by default.}

\item{gamma_regularizer}{Optional regularizer for the gamma weight.
\code{NULL} by default.}

\item{beta_constraint}{Optional constraint for the beta weight.
\code{NULL} by default.}

\item{gamma_constraint}{Optional constraint for the gamma weight.
\code{NULL} by default.}

\item{...}{Base layer keyword arguments (e.g. \code{name} and \code{dtype}).}
}
\description{
Normalize the activations of the previous layer for each given example in a
batch independently, rather than across a batch like Batch Normalization.
i.e. applies a transformation that maintains the mean activation within each
example close to 0 and the activation standard deviation close to 1.

If \code{scale} or \code{center} are enabled, the layer will scale the normalized
outputs by broadcasting them with a trainable variable \code{gamma}, and center
the outputs by broadcasting with a trainable variable \code{beta}. \code{gamma} will
default to a ones tensor and \code{beta} will default to a zeros tensor, so that
centering and scaling are no-ops before training has begun.

So, with scaling and centering enabled the normalization equations
are as follows:

Let the intermediate activations for a mini-batch to be the \code{inputs}.

For each sample \code{x} in a batch of \code{inputs}, we compute the mean and
variance of the sample, normalize each value in the sample
(including a small factor \code{epsilon} for numerical stability),
and finally,
transform the normalized output by \code{gamma} and \code{beta},
which are learned parameters:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{outputs <- inputs |> apply(1, function(x) \{
  x_normalized <- (x - mean(x)) /
                  sqrt(var(x) + epsilon)
  x_normalized * gamma + beta
\})
}\if{html}{\out{</div>}}

\code{gamma} and \code{beta} will span the axes of \code{inputs} specified in \code{axis}, and
this part of the inputs' shape must be fully defined.

For example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{layer <- layer_layer_normalization(axis = c(2, 3, 4))

layer(k_ones(c(5, 20, 30, 40))) |> invisible() # build()
layer$beta$shape
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## TensorShape([20, 30, 40])
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{layer$gamma$shape
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## TensorShape([20, 30, 40])
}\if{html}{\out{</div>}}

Note that other implementations of layer normalization may choose to define
\code{gamma} and \code{beta} over a separate set of axes from the axes being
normalized across. For example, Group Normalization
(\href{https://arxiv.org/abs/1803.08494}{Wu et al. 2018}) with group size of 1
corresponds to a \code{layer_layer_normalization()} that normalizes across height, width,
and channel and has \code{gamma} and \code{beta} span only the channel dimension.
So, this \code{layer_layer_normalization()} implementation will not match a
\code{layer_group_normalization()} layer with group size set to 1.
}
\section{Reference}{
\itemize{
\item \href{https://arxiv.org/abs/1607.06450}{Lei Ba et al., 2016}.
}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/normalization_layers/layer_normalization#layernormalization-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/LayerNormalization}
}

Other normalization layers: 
\code{\link{layer_batch_normalization}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_spectral_normalization}()},
\code{\link{layer_unit_normalization}()}
}
\concept{normalization layers}
