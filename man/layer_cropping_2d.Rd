% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-reshaping.R
\name{layer_cropping_2d}
\alias{layer_cropping_2d}
\title{Cropping layer for 2D input (e.g. picture).}
\usage{
layer_cropping_2d(
  object,
  cropping = list(list(0L, 0L), list(0L, 0L)),
  data_format = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{cropping}{Int, or list of 2 ints, or list of 2 lists of 2 ints.
- If int: the same symmetric cropping is applied to height and
width.
- If list of 2 ints: interpreted as two different symmetric
cropping values for height and width:
\verb{(symmetric_height_crop, symmetric_width_crop)}.
- If list of 2 lists of 2 ints: interpreted as
\verb{((top_crop, bottom_crop), (left_crop, right_crop))}.}

\item{data_format}{A string, one of \code{"channels_last"} (default) or
\code{"channels_first"}. The ordering of the dimensions in the inputs.
\code{"channels_last"} corresponds to inputs with shape
\verb{(batch_size, height, width, channels)} while \code{"channels_first"}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}.
When unspecified, uses \code{image_data_format} value found in your Keras
config file at \verb{~/.keras/keras.json} (if exists). Defaults to
\code{"channels_last"}.}

\item{...}{Passed on to the Python callable}
}
\description{
It crops along spatial dimensions, i.e. height and width.
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{input_shape <- c(2, 28, 28, 3)
x <- k_arange(prod(input_shape), dtype ='int32') |> k_reshape(input_shape)
y <- x |> layer_cropping_2d(cropping=list(c(2, 2), c(4, 4)))
y$shape
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## TensorShape([2, 24, 20, 3])
}\if{html}{\out{</div>}}
}

\section{Input Shape}{
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, height, width, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, height, width)}
}
}

\section{Output Shape}{
4D tensor with shape:
\itemize{
\item If \code{data_format} is \code{"channels_last"}:
\verb{(batch_size, cropped_height, cropped_width, channels)}
\item If \code{data_format} is \code{"channels_first"}:
\verb{(batch_size, channels, cropped_height, cropped_width)}
}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/reshaping_layers/cropping2d#cropping2d-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Cropping2D}
}

Other reshaping layers: 
\code{\link{layer_cropping_1d}()},
\code{\link{layer_cropping_3d}()},
\code{\link{layer_flatten}()},
\code{\link{layer_permute}()},
\code{\link{layer_repeat_vector}()},
\code{\link{layer_reshape}()},
\code{\link{layer_upsampling_1d}()},
\code{\link{layer_upsampling_2d}()},
\code{\link{layer_upsampling_3d}()},
\code{\link{layer_zero_padding_1d}()},
\code{\link{layer_zero_padding_2d}()},
\code{\link{layer_zero_padding_3d}()}
}
\concept{reshaping layers}
