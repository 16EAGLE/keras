% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-metrics.R
\name{metric_mean_squared_logarithmic_error}
\alias{metric_mean_squared_logarithmic_error}
\title{Computes mean squared logarithmic error between \code{y_true} and \code{y_pred}.}
\usage{
metric_mean_squared_logarithmic_error(
  y_true,
  y_pred,
  ...,
  name = "mean_squared_logarithmic_error",
  dtype = NULL
)
}
\arguments{
\item{y_true}{Ground truth values with shape = \verb{[batch_size, d0, .. dN]}.}

\item{y_pred}{The predicted values with shape = \verb{[batch_size, d0, .. dN]}.}

\item{...}{Passed on to the Python callable}

\item{name}{(Optional) string name of the metric instance.}

\item{dtype}{(Optional) data type of the metric result.}
}
\description{
Formula:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{loss = mean(square(log(y_true + 1) - log(y_pred + 1)), axis=-1)
}\if{html}{\out{</div>}}

Note that \code{y_pred} and \code{y_true} cannot be less or equal to 0. Negative
values and 0 values will be replaced with \code{keras.backend.epsilon()}
(default to \code{1e-7}).
Formula:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{loss = mean(square(log(y_true + 1) - log(y_pred + 1)))
}\if{html}{\out{</div>}}
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{y_true = np.random.randint(0, 2, size=(2, 3))
y_pred = np.random.random(size=(2, 3))
loss = keras.losses.mean_squared_logarithmic_error(y_true, y_pred)
}\if{html}{\out{</div>}}

Standalone usage:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{m = keras.metrics.MeanSquaredLogarithmicError()
m.update_state([[0, 1], [0, 0]], [[1, 1], [0, 0]])
m.result()
# 0.12011322
m.reset_state()
m.update_state([[0, 1], [0, 0]], [[1, 1], [0, 0]],
               sample_weight=[1, 0])
m.result()
# 0.24022643
}\if{html}{\out{</div>}}

Usage with \code{compile()} API:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{model.compile(
    optimizer='sgd',
    loss='mse',
    metrics=[keras.metrics.MeanSquaredLogarithmicError()])
}\if{html}{\out{</div>}}
}

\section{Returns}{
Mean squared logarithmic error values with shape = \verb{[batch_size, d0, .. dN-1]}.
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/metrics/MeanSquaredLogarithmicError}
}

Other metric: 
\code{\link{metric_auc}()},
\code{\link{metric_binary_accuracy}()},
\code{\link{metric_binary_crossentropy}()},
\code{\link{metric_binary_iou}()},
\code{\link{metric_categorical_accuracy}()},
\code{\link{metric_categorical_crossentropy}()},
\code{\link{metric_categorical_hinge}()},
\code{\link{metric_cosine_similarity}()},
\code{\link{metric_f1_score}()},
\code{\link{metric_false_negatives}()},
\code{\link{metric_false_positives}()},
\code{\link{metric_fbeta_score}()},
\code{\link{metric_hinge}()},
\code{\link{metric_iou}()},
\code{\link{metric_kl_divergence}()},
\code{\link{metric_log_cosh_error}()},
\code{\link{metric_mean_absolute_error}()},
\code{\link{metric_mean_absolute_percentage_error}()},
\code{\link{metric_mean_iou}()},
\code{\link{metric_mean_squared_error}()},
\code{\link{metric_mean_wrapper}()},
\code{\link{metric_mean}()},
\code{\link{metric_one_hot_iou}()},
\code{\link{metric_one_hot_mean_iou}()},
\code{\link{metric_poisson}()},
\code{\link{metric_precision_at_recall}()},
\code{\link{metric_precision}()},
\code{\link{metric_r2_score}()},
\code{\link{metric_recall_at_precision}()},
\code{\link{metric_recall}()},
\code{\link{metric_root_mean_squared_error}()},
\code{\link{metric_sensitivity_at_specificity}()},
\code{\link{metric_sparse_categorical_accuracy}()},
\code{\link{metric_sparse_categorical_crossentropy}()},
\code{\link{metric_sparse_top_k_categorical_accuracy}()},
\code{\link{metric_specificity_at_sensitivity}()},
\code{\link{metric_squared_hinge}()},
\code{\link{metric_sum}()},
\code{\link{metric_top_k_categorical_accuracy}()},
\code{\link{metric_true_negatives}()},
\code{\link{metric_true_positives}()}
}
\concept{metric}
