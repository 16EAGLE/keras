% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-losses.R
\name{loss_binary_focal_crossentropy}
\alias{loss_binary_focal_crossentropy}
\title{Computes focal cross-entropy loss between true labels and predictions.}
\usage{
loss_binary_focal_crossentropy(
  y_true,
  y_pred,
  apply_class_balancing = FALSE,
  alpha = 0.25,
  gamma = 2,
  from_logits = FALSE,
  label_smoothing = 0,
  axis = -1L,
  ...,
  reduction = "sum_over_batch_size",
  name = "binary_focal_crossentropy"
)
}
\arguments{
\item{y_true}{Ground truth values, of shape \verb{(batch_size, d0, .. dN)}.}

\item{y_pred}{The predicted values, of shape \verb{(batch_size, d0, .. dN)}.}

\item{apply_class_balancing}{A bool, whether to apply weight balancing on the
binary classes 0 and 1.}

\item{alpha}{A weight balancing factor for class 1, default is \code{0.25} as
mentioned in the reference. The weight for class 0 is \code{1.0 - alpha}.}

\item{gamma}{A focusing parameter, default is \code{2.0} as mentioned in the
reference.}

\item{from_logits}{Whether \code{y_pred} is expected to be a logits tensor. By
default, we assume that \code{y_pred} encodes a probability distribution.}

\item{label_smoothing}{Float in \verb{[0, 1]}. If > \code{0} then smooth the labels by
squeezing them towards 0.5, that is,
using \code{1. - 0.5 * label_smoothing} for the target class
and \code{0.5 * label_smoothing} for the non-target class.}

\item{axis}{The axis along which the mean is computed. Defaults to \code{-1}.}

\item{...}{Passed on to the Python callable}

\item{reduction}{Type of reduction to apply to the loss. In almost all cases
this should be \code{"sum_over_batch_size"}.
Supported options are \code{"sum"}, \code{"sum_over_batch_size"} or \code{None}.}

\item{name}{Optional name for the loss instance.}
}
\description{
According to \href{https://arxiv.org/pdf/1708.02002.pdf}{Lin et al., 2018}, it
helps to apply a focal factor to down-weight easy examples and focus more on
hard examples. By default, the focal tensor is computed as follows:

\code{focal_factor = (1 - output) ** gamma} for class 1
\code{focal_factor = output ** gamma} for class 0
where \code{gamma} is a focusing parameter. When \code{gamma} = 0, there is no focal
effect on the binary crossentropy loss.

If \code{apply_class_balancing == True}, this function also takes into account a
weight balancing factor for the binary classes 0 and 1 as follows:

\code{weight = alpha} for class 1 (\code{target == 1})
\code{weight = 1 - alpha} for class 0
where \code{alpha} is a float in the range of \verb{[0, 1]}.
Binary cross-entropy loss is often used for binary (0 or 1) classification
tasks. The loss function requires the following inputs:
\itemize{
\item \code{y_true} (true label): This is either 0 or 1.
\item \code{y_pred} (predicted value): This is the model's prediction, i.e, a single
floating-point value which either represents a
\verb{[logit](https://en.wikipedia.org/wiki/Logit), (i.e, value in [-inf, inf]}
when \code{from_logits=True}) or a probability (i.e, value in \verb{[0., 1.]} when
\code{from_logits=False}).
}

According to \href{https://arxiv.org/pdf/1708.02002.pdf}{Lin et al., 2018}, it
helps to apply a "focal factor" to down-weight easy examples and focus more
on hard examples. By default, the focal tensor is computed as follows:

\code{focal_factor = (1 - output) ** gamma} for class 1
\code{focal_factor = output ** gamma} for class 0
where \code{gamma} is a focusing parameter. When \code{gamma=0}, this function is
equivalent to the binary crossentropy loss.
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{y_true = [[0, 1], [0, 0]]
y_pred = [[0.6, 0.4], [0.4, 0.6]]
loss = keras.losses.binary_focal_crossentropy(
       y_true, y_pred, gamma=2)
assert loss.shape == (2,)
loss
# array([0.330, 0.206], dtype=float32)
}\if{html}{\out{</div>}}

With the \code{compile()} API:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{model.compile(
    loss=keras.losses.BinaryFocalCrossentropy(
        gamma=2.0, from_logits=True),
    ...
)
}\if{html}{\out{</div>}}

As a standalone function:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Example 1: (batch_size = 1, number of samples = 4)
y_true = [0, 1, 0, 0]
y_pred = [-18.6, 0.51, 2.94, -12.8]
loss = keras.losses.BinaryFocalCrossentropy(
   gamma=2, from_logits=True)
loss(y_true, y_pred)
# 0.691
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Apply class weight
loss = keras.losses.BinaryFocalCrossentropy(
    apply_class_balancing=True, gamma=2, from_logits=True)
loss(y_true, y_pred)
# 0.51
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Example 2: (batch_size = 2, number of samples = 4)
y_true = [[0, 1], [0, 0]]
y_pred = [[-18.6, 0.51], [2.94, -12.8]]
# Using default 'auto'/'sum_over_batch_size' reduction type.
loss = keras.losses.BinaryFocalCrossentropy(
    gamma=3, from_logits=True)
loss(y_true, y_pred)
# 0.647
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Apply class weight
loss = keras.losses.BinaryFocalCrossentropy(
     apply_class_balancing=True, gamma=3, from_logits=True)
loss(y_true, y_pred)
# 0.482
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Using 'sample_weight' attribute with focal effect
loss = keras.losses.BinaryFocalCrossentropy(
    gamma=3, from_logits=True)
loss(y_true, y_pred, sample_weight=[0.8, 0.2])
# 0.133
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Apply class weight
loss = keras.losses.BinaryFocalCrossentropy(
     apply_class_balancing=True, gamma=3, from_logits=True)
loss(y_true, y_pred, sample_weight=[0.8, 0.2])
# 0.097
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Using 'sum' reduction` type.
loss = keras.losses.BinaryFocalCrossentropy(
    gamma=4, from_logits=True,
    reduction="sum")
loss(y_true, y_pred)
# 1.222
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Apply class weight
loss = keras.losses.BinaryFocalCrossentropy(
    apply_class_balancing=True, gamma=4, from_logits=True,
    reduction="sum")
loss(y_true, y_pred)
# 0.914
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Using 'none' reduction type.
loss = keras.losses.BinaryFocalCrossentropy(
    gamma=5, from_logits=True,
    reduction=None)
loss(y_true, y_pred)
# array([0.0017 1.1561], dtype=float32)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Apply class weight
loss = keras.losses.BinaryFocalCrossentropy(
    apply_class_balancing=True, gamma=5, from_logits=True,
    reduction=None)
loss(y_true, y_pred)
# array([0.0004 0.8670], dtype=float32)
}\if{html}{\out{</div>}}
}

\section{Returns}{
Binary focal crossentropy loss value
with shape = \verb{[batch_size, d0, .. dN-1]}.
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/losses/BinaryFocalCrossentropy}
}

Other loss: 
\code{\link{loss_binary_crossentropy}()},
\code{\link{loss_categorical_crossentropy}()},
\code{\link{loss_categorical_focal_crossentropy}()},
\code{\link{loss_categorical_hinge}()},
\code{\link{loss_cosine_similarity}()},
\code{\link{loss_hinge}()},
\code{\link{loss_huber}()},
\code{\link{loss_kl_divergence}()},
\code{\link{loss_logcosh}()},
\code{\link{loss_mean_absolute_error}()},
\code{\link{loss_mean_absolute_percentage_error}()},
\code{\link{loss_mean_squared_error}()},
\code{\link{loss_mean_squared_logarithmic_error}()},
\code{\link{loss_poisson}()},
\code{\link{loss_sparse_categorical_crossentropy}()},
\code{\link{loss_squared_hinge}()}
}
\concept{loss}
