% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-utils.R
\name{clear_session}
\alias{clear_session}
\title{Resets all state generated by Keras.}
\usage{
clear_session()
}
\description{
Keras manages a global state, which it uses to implement the Functional
model-building API and to uniquify autogenerated layer names.

If you are creating many models in a loop, this global state will consume
an increasing amount of memory over time, and you may want to clear it.
Calling \code{clear_session()} releases the global state: this helps avoid
clutter from old models and layers, especially when memory is limited.

Example 1: calling \code{clear_session()} when creating models in a loop

\if{html}{\out{<div class="sourceCode python">}}\preformatted{for _ in range(100):
  # Without `clear_session()`, each iteration of this loop will
  # slightly increase the size of the global state managed by Keras
  model = keras.Sequential([
      keras.layers.Dense(10) for _ in range(10)])

for _ in range(100):
  # With `clear_session()` called at the beginning,
  # Keras starts with a blank state at each iteration
  # and memory consumption is constant over time.
  keras.backend.clear_session()
  model = keras.Sequential([
      keras.layers.Dense(10) for _ in range(10)])
}\if{html}{\out{</div>}}

Example 2: resetting the layer name generation counter

\if{html}{\out{<div class="sourceCode python">}}\preformatted{layers = [keras.layers.Dense(10) for _ in range(10)]
new_layer = keras.layers.Dense(10)
print(new_layer.name)
# dense_10
keras.backend.clear_session()
new_layer = keras.layers.Dense(10)
print(new_layer.name)
# dense
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/utils/clear_session}
}
}
