% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-preprocessing.R
\name{layer_category_encoding}
\alias{layer_category_encoding}
\title{A preprocessing layer which encodes integer features.}
\usage{
layer_category_encoding(
  object,
  num_tokens = NULL,
  output_mode = "multi_hot",
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{num_tokens}{The total number of tokens the layer should support. All
inputs to the layer must integers in the range \verb{0 <= value < num_tokens}, or an error will be thrown.}

\item{output_mode}{Specification for the output of the layer.
Values can be \code{"one_hot"}, \code{"multi_hot"} or \code{"count"},
configuring the layer as follows:
- \code{"one_hot"}: Encodes each individual element in the input
into an array of \code{num_tokens} size, containing a 1 at the
element index. If the last dimension is size 1, will encode
on that dimension. If the last dimension is not size 1,
will append a new dimension for the encoded output.
- \code{"multi_hot"}: Encodes each sample in the input into a single
array of \code{num_tokens} size, containing a 1 for each
vocabulary term present in the sample. Treats the last
dimension as the sample dimension, if input shape is
\verb{(..., sample_length)}, output shape will be
\verb{(..., num_tokens)}.
- \code{"count"}: Like \code{"multi_hot"}, but the int array contains a
count of the number of times the token at that index
appeared in the sample.
For all output modes, currently only output up to rank 2 is
supported.
Defaults to \code{"multi_hot"}.}

\item{...}{Passed on to the Python callable}
}
\description{
This layer provides options for condensing data into a categorical encoding
when the total number of tokens are known in advance. It accepts integer
values as inputs, and it outputs a dense or sparse representation of those
inputs. For integer inputs where the total number of tokens is not known,
use \code{keras.layers.IntegerLookup} instead.

\strong{Note:} This layer is safe to use inside a \code{tf.data} pipeline
(independently of which backend you're using).
}
\section{Examples}{
\strong{One-hot encoding data}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{layer = keras.layers.CategoryEncoding(
          num_tokens=4, output_mode="one_hot")
layer([3, 2, 0, 1])
# array([[0., 0., 0., 1.],
#         [0., 0., 1., 0.],
#         [1., 0., 0., 0.],
#         [0., 1., 0., 0.]]>
}\if{html}{\out{</div>}}

\strong{Multi-hot encoding data}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{layer = keras.layers.CategoryEncoding(
          num_tokens=4, output_mode="multi_hot")
layer([[0, 1], [0, 0], [1, 2], [3, 1]])
# array([[1., 1., 0., 0.],
#         [1., 0., 0., 0.],
#         [0., 1., 1., 0.],
#         [0., 1., 0., 1.]]>
}\if{html}{\out{</div>}}

\strong{Using weighted inputs in \code{"count"} mode}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{layer = keras.layers.CategoryEncoding(
          num_tokens=4, output_mode="count")
count_weights = np.array([[.1, .2], [.1, .1], [.2, .3], [.4, .2]])
layer([[0, 1], [0, 0], [1, 2], [3, 1]], count_weights=count_weights)
#   array([[0.1, 0.2, 0. , 0. ],
#          [0.2, 0. , 0. , 0. ],
#          [0. , 0.2, 0.3, 0. ],
#          [0. , 0.2, 0. , 0.4]]>
}\if{html}{\out{</div>}}
}

\section{Call Arguments}{
\itemize{
\item \code{inputs}: A 1D or 2D tensor of integer inputs.
\item \code{count_weights}: A tensor in the same shape as \code{inputs} indicating the
weight for each sample value when summing up in \code{count} mode.
Not used in \code{"multi_hot"} or \code{"one_hot"} modes.
}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/CategoryEncoding}
}

Other preprocessing layers: 
\code{\link{layer_center_crop}()},
\code{\link{layer_discretization}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_normalization}()},
\code{\link{layer_random_brightness}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_rotation}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_resizing}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_text_vectorization}()}
}
\concept{preprocessing layers}
