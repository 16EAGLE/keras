% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-core.R
\name{layer_dense}
\alias{layer_dense}
\title{Just your regular densely-connected NN layer.}
\usage{
layer_dense(
  object,
  units,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
If you don't specify anything, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix.}

\item{bias_initializer}{Initializer for the bias vector.}

\item{kernel_regularizer}{Regularizer function applied to
the \code{kernel} weights matrix.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.}

\item{activity_regularizer}{Regularizer function applied to
the output of the layer (its "activation").}

\item{kernel_constraint}{Constraint function applied to
the \code{kernel} weights matrix.}

\item{bias_constraint}{Constraint function applied to the bias vector.}
}
\description{
\code{Dense} implements the operation:
\code{output = activation(dot(input, kernel) + bias)}
where \code{activation} is the element-wise activation function
passed as the \code{activation} argument, \code{kernel} is a weights matrix
created by the layer, and \code{bias} is a bias vector created by the layer
(only applicable if \code{use_bias} is \code{True}).

Note: If the input to the layer has a rank greater than 2, \code{Dense}
computes the dot product between the \code{inputs} and the \code{kernel} along the
last axis of the \code{inputs} and axis 0 of the \code{kernel} (using \code{tf.tensordot}).
For example, if input has dimensions \verb{(batch_size, d0, d1)}, then we create
a \code{kernel} with shape \verb{(d1, units)}, and the \code{kernel} operates along axis 2
of the \code{input}, on every sub-tensor of shape \verb{(1, 1, d1)} (there are
\code{batch_size * d0} such sub-tensors). The output in this case will have
shape \verb{(batch_size, d0, units)}.
}
\section{Input Shape}{
N-D tensor with shape: \verb{(batch_size, ..., input_dim)}.
The most common situation would be
a 2D input with shape \verb{(batch_size, input_dim)}.
}

\section{Output Shape}{
N-D tensor with shape: \verb{(batch_size, ..., units)}.
For instance, for a 2D input with shape \verb{(batch_size, input_dim)},
the output would have shape \verb{(batch_size, units)}.
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense}
}

Other core layers: 
\code{\link{layer_einsum_dense}()},
\code{\link{layer_embedding}()},
\code{\link{layer_identity}()},
\code{\link{layer_lambda}()},
\code{\link{layer_masking}()},
\code{\link{layer_wrapper}()}
}
\concept{core layers}
