% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new-py-types.R
\name{new_metric_class}
\alias{new_metric_class}
\alias{new_model_class}
\alias{new-classes}
\title{Define new keras types}
\usage{
new_metric_class(classname, ..., initialize, update_state, result)

new_model_class(
  classname,
  ...,
  initialize = NULL,
  call = NULL,
  train_step = NULL,
  predict_step = NULL,
  test_step = NULL,
  compute_loss = NULL,
  compute_metrics = NULL
)
}
\arguments{
\item{classname}{The classname as a string. Convention is for the classname
to be a CamelCase version of the constructor.}

\item{...}{Additional fields and methods for the new type.}

\item{initialize, update_state, result, call, train_step, predict_step, test_step, compute_loss, compute_metrics}{Optional methods that can be overridden.}
}
\value{
A new class generator object that inherits from the appropriate Keras
base class.
}
\description{
These functions can be used to make custom objects that fit in the family of
existing keras types. For example, \code{new_layer_class()} will return a class
constructor, an object that behaves like other layer functions such as
\code{layer_dense()}. \code{new_callback_class()} will return an object that behaves
similarly to other callback functions, like
\code{callback_reduce_lr_on_plateau()}, and so on. All arguments with a default
\code{NULL} value are optional methods that can be provided.
}
\details{
\code{mark_active()} is a decorator that can be used to indicate functions that
should become active properties of the class instances.
}
