% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ops.R
\name{k_slice_update}
\alias{k_slice_update}
\title{Update an input by slicing in a tensor of updated values.}
\usage{
k_slice_update(inputs, start_indices, updates)
}
\arguments{
\item{inputs}{A tensor, the tensor to be updated.}

\item{start_indices}{A list/tuple of shape \verb{(inputs.ndim,)}, specifying
the starting indices for updating.}

\item{updates}{A tensor, the new values to be put to \code{inputs} at \code{indices}.
\code{updates} must have the same rank as \code{inputs}.}
}
\description{
At a high level, this operation does
\code{inputs[start_indices: start_indices + updates.shape] = updates}.
Assume inputs is a tensor of shape \verb{(D0, D1, ..., Dn)},
\code{start_indices} must be a list/tuple of n integers, specifying the starting
indices. \code{updates} must have the same rank as \code{inputs}, and the size of each
dim must not exceed \code{Di - start_indices[i]}. For example, if we have 2D
inputs \verb{inputs = np.zeros((5, 5))}, and we want to update the intersection
of last 2 rows and last 2 columns as 1, i.e.,
\verb{inputs[3:, 3:] = np.ones((2, 2))}, then we can use the code below:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{inputs = np.zeros((5, 5))
start_indices = [3, 3]
updates = np.ones((2, 2))
inputs = keras_core.ops.slice_update(inputs, start_indices, updates)
}\if{html}{\out{</div>}}
}
\section{Returns}{
\if{html}{\out{<div class="sourceCode">}}\preformatted{A tensor, has the same shape and dtype as `inputs`.
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/ops/slice_update}
}
}
