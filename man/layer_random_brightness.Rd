% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-preprocessing.R
\name{layer_random_brightness}
\alias{layer_random_brightness}
\title{A preprocessing layer which randomly adjusts brightness during training.}
\usage{
layer_random_brightness(
  object,
  factor,
  value_range = list(0L, 255L),
  seed = NULL,
  ...
)
}
\arguments{
\item{factor}{Float or a list/tuple of 2 floats between -1.0 and 1.0. The
factor is used to determine the lower bound and upper bound of the
brightness adjustment. A float value will be chosen randomly between
the limits. When -1.0 is chosen, the output image will be black, and
when 1.0 is chosen, the image will be fully white.
When only one float is provided, eg, 0.2,
then -0.2 will be used for lower bound and 0.2
will be used for upper bound.}

\item{value_range}{Optional list/tuple of 2 floats
for the lower and upper limit
of the values of the input data.
To make no change, use \verb{[0.0, 1.0]}, e.g., if the image input
has been scaled before this layer. Defaults to \verb{[0.0, 255.0]}.
The brightness adjustment will be scaled to this range, and the
output values will be clipped to this range.}

\item{seed}{optional integer, for fixed RNG behavior.}
}
\description{
This layer will randomly increase/reduce the brightness for the input RGB
images. At inference time, the output will be identical to the input.
Call the layer with \code{training=True} to adjust the brightness of the input.

\strong{Note:} This layer is safe to use inside a \code{tf.data} pipeline
(independently of which backend you're using).
}
\section{Inputs}{
3D (HWC) or 4D (NHWC) tensor, with float or int dtype. Input pixel
values can be of any range (e.g. \verb{[0., 1.)} or \verb{[0, 255]})
}

\section{Output}{
3D (HWC) or 4D (NHWC) tensor with brightness adjusted based on the
\code{factor}. By default, the layer will output floats.
The output value will be clipped to the range \verb{[0, 255]},
the valid range of RGB colors, and
rescaled based on the \code{value_range} if needed.

Sample usage:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{random_bright = keras_core.layers.RandomBrightness(factor=0.2)

# An image with shape [2, 2, 3]
image = [[[1, 2, 3], [4 ,5 ,6]], [[7, 8, 9], [10, 11, 12]]]

# Assume we randomly select the factor to be 0.1, then it will apply
# 0.1 * 255 to all the channel
output = random_bright(image, training=True)

# output will be int64 with 25.5 added to each channel and round down.
```python
array([[[26.5, 27.5, 28.5]
#             [29.5, 30.5, 31.5]]
#            [[32.5, 33.5, 34.5]
#             [35.5, 36.5, 37.5]]],
#           shape=(2, 2, 3), dtype=int64)
# ```
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/RandomBrightness}
}

Other preprocessing layers: 
\code{\link{layer_category_encoding}()},
\code{\link{layer_center_crop}()},
\code{\link{layer_discretization}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_normalization}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_rotation}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_resizing}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_text_vectorization}()}
}
\concept{preprocessing layers}
