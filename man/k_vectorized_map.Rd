% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-ops.R
\name{k_vectorized_map}
\alias{k_vectorized_map}
\title{Parallel map of \code{function} on axis 0 of tensor(s) \code{elements}.}
\usage{
k_vectorized_map(elements, f)
}
\arguments{
\item{elements}{see description}

\item{f}{A function taking either a tensor, or list of tensors.}
}
\description{
Schematically, \code{vectorized_map} implements the following,
in the case of a single tensor input \code{elements}:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{k_vectorized_map <- function(elements, f) \{
  apply(elements, 1, f)
\}
}\if{html}{\out{</div>}}

In the case of an iterable of tensors \code{elements},
it implements the following:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{k_vectorized_map <- function(elements, f) \{
    batch_size <- elements[[1]]$shape[[1]]
    outputs <- vector("list", batch_size)
    outputs <- lapply(seq(batch_size), \\(index) \{
        f(lapply(elements, \\(e) e[index, all_dims()]))
    \}
    k_stack(outputs)
\}
}\if{html}{\out{</div>}}

In this case, \code{function} is expected to take as input
a single list of tensor arguments.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{(x <- k_arange(4*4) |> k_reshape(c(4,4)))
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## tf.Tensor(
## [[ 0.  1.  2.  3.]
##  [ 4.  5.  6.  7.]
##  [ 8.  9. 10. 11.]
##  [12. 13. 14. 15.]], shape=(4, 4), dtype=float64)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x |> k_vectorized_map(\\(row) \{row + 10\})
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## tf.Tensor(
## [[10. 11. 12. 13.]
##  [14. 15. 16. 17.]
##  [18. 19. 20. 21.]
##  [22. 23. 24. 25.]], shape=(4, 4), dtype=float64)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{list(x, x, x) |> k_vectorized_map(\\(rows) Reduce(`+`, rows))
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## tf.Tensor(
## [[ 0.  3.  6.  9.]
##  [12. 15. 18. 21.]
##  [24. 27. 30. 33.]
##  [36. 39. 42. 45.]], shape=(4, 4), dtype=float64)
}\if{html}{\out{</div>}}
}
\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/ops/vectorized_map}
}

Other core ops: 
\code{\link{k_cast}()},
\code{\link{k_cond}()},
\code{\link{k_convert_to_numpy}()},
\code{\link{k_convert_to_tensor}()},
\code{\link{k_fori_loop}()},
\code{\link{k_is_tensor}()},
\code{\link{k_scatter_update}()},
\code{\link{k_scatter}()},
\code{\link{k_shape}()},
\code{\link{k_slice_update}()},
\code{\link{k_slice}()},
\code{\link{k_stop_gradient}()},
\code{\link{k_unstack}()},
\code{\link{k_while_loop}()}

Other ops: 
\code{\link{get_source_inputs}()},
\code{\link{k_abs}()},
\code{\link{k_add}()},
\code{\link{k_all}()},
\code{\link{k_amax}()},
\code{\link{k_amin}()},
\code{\link{k_any}()},
\code{\link{k_append}()},
\code{\link{k_arange}()},
\code{\link{k_arccosh}()},
\code{\link{k_arccos}()},
\code{\link{k_arcsinh}()},
\code{\link{k_arcsin}()},
\code{\link{k_arctan2}()},
\code{\link{k_arctanh}()},
\code{\link{k_arctan}()},
\code{\link{k_argmax}()},
\code{\link{k_argmin}()},
\code{\link{k_argsort}()},
\code{\link{k_array}()},
\code{\link{k_average_pool}()},
\code{\link{k_average}()},
\code{\link{k_binary_crossentropy}()},
\code{\link{k_bincount}()},
\code{\link{k_broadcast_to}()},
\code{\link{k_cast}()},
\code{\link{k_categorical_crossentropy}()},
\code{\link{k_ceil}()},
\code{\link{k_clip}()},
\code{\link{k_concatenate}()},
\code{\link{k_cond}()},
\code{\link{k_conjugate}()},
\code{\link{k_conj}()},
\code{\link{k_conv_transpose}()},
\code{\link{k_convert_to_numpy}()},
\code{\link{k_convert_to_tensor}()},
\code{\link{k_conv}()},
\code{\link{k_copy}()},
\code{\link{k_cosh}()},
\code{\link{k_cos}()},
\code{\link{k_count_nonzero}()},
\code{\link{k_cross}()},
\code{\link{k_cumprod}()},
\code{\link{k_cumsum}()},
\code{\link{k_depthwise_conv}()},
\code{\link{k_diagonal}()},
\code{\link{k_diag}()},
\code{\link{k_diff}()},
\code{\link{k_digitize}()},
\code{\link{k_divide}()},
\code{\link{k_dot}()},
\code{\link{k_einsum}()},
\code{\link{k_elu}()},
\code{\link{k_empty}()},
\code{\link{k_equal}()},
\code{\link{k_erf}()},
\code{\link{k_expand_dims}()},
\code{\link{k_expm1}()},
\code{\link{k_exp}()},
\code{\link{k_extract_sequences}()},
\code{\link{k_eye}()},
\code{\link{k_fft2}()},
\code{\link{k_fft}()},
\code{\link{k_flip}()},
\code{\link{k_floor_divide}()},
\code{\link{k_floor}()},
\code{\link{k_fori_loop}()},
\code{\link{k_full_like}()},
\code{\link{k_full}()},
\code{\link{k_gelu}()},
\code{\link{k_get_item}()},
\code{\link{k_greater_equal}()},
\code{\link{k_greater}()},
\code{\link{k_hard_sigmoid}()},
\code{\link{k_hstack}()},
\code{\link{k_identity}()},
\code{\link{k_image_affine_transform}()},
\code{\link{k_image_extract_patches}()},
\code{\link{k_image_map_coordinates}()},
\code{\link{k_image_pad_images}()},
\code{\link{k_image_resize}()},
\code{\link{k_imag}()},
\code{\link{k_in_top_k}()},
\code{\link{k_irfft}()},
\code{\link{k_is_tensor}()},
\code{\link{k_isclose}()},
\code{\link{k_isfinite}()},
\code{\link{k_isinf}()},
\code{\link{k_isnan}()},
\code{\link{k_istft}()},
\code{\link{k_leaky_relu}()},
\code{\link{k_less_equal}()},
\code{\link{k_less}()},
\code{\link{k_linspace}()},
\code{\link{k_log10}()},
\code{\link{k_log1p}()},
\code{\link{k_log2}()},
\code{\link{k_log_sigmoid}()},
\code{\link{k_log_softmax}()},
\code{\link{k_logaddexp}()},
\code{\link{k_logical_and}()},
\code{\link{k_logical_not}()},
\code{\link{k_logical_or}()},
\code{\link{k_logical_xor}()},
\code{\link{k_logspace}()},
\code{\link{k_logsumexp}()},
\code{\link{k_log}()},
\code{\link{k_matmul}()},
\code{\link{k_max_pool}()},
\code{\link{k_maximum}()},
\code{\link{k_max}()},
\code{\link{k_mean}()},
\code{\link{k_median}()},
\code{\link{k_meshgrid}()},
\code{\link{k_minimum}()},
\code{\link{k_min}()},
\code{\link{k_mod}()},
\code{\link{k_moments}()},
\code{\link{k_moveaxis}()},
\code{\link{k_multi_hot}()},
\code{\link{k_multiply}()},
\code{\link{k_nan_to_num}()},
\code{\link{k_ndim}()},
\code{\link{k_negative}()},
\code{\link{k_nonzero}()},
\code{\link{k_not_equal}()},
\code{\link{k_one_hot}()},
\code{\link{k_ones_like}()},
\code{\link{k_ones}()},
\code{\link{k_outer}()},
\code{\link{k_pad}()},
\code{\link{k_power}()},
\code{\link{k_prod}()},
\code{\link{k_qr}()},
\code{\link{k_quantile}()},
\code{\link{k_ravel}()},
\code{\link{k_real}()},
\code{\link{k_reciprocal}()},
\code{\link{k_relu6}()},
\code{\link{k_relu}()},
\code{\link{k_repeat}()},
\code{\link{k_reshape}()},
\code{\link{k_rfft}()},
\code{\link{k_roll}()},
\code{\link{k_round}()},
\code{\link{k_rsqrt}()},
\code{\link{k_scatter_update}()},
\code{\link{k_scatter}()},
\code{\link{k_segment_max}()},
\code{\link{k_segment_sum}()},
\code{\link{k_selu}()},
\code{\link{k_separable_conv}()},
\code{\link{k_shape}()},
\code{\link{k_sigmoid}()},
\code{\link{k_sign}()},
\code{\link{k_silu}()},
\code{\link{k_sinh}()},
\code{\link{k_sin}()},
\code{\link{k_size}()},
\code{\link{k_slice_update}()},
\code{\link{k_slice}()},
\code{\link{k_softmax}()},
\code{\link{k_softplus}()},
\code{\link{k_softsign}()},
\code{\link{k_solve}()},
\code{\link{k_sort}()},
\code{\link{k_sparse_categorical_crossentropy}()},
\code{\link{k_split}()},
\code{\link{k_sqrt}()},
\code{\link{k_square}()},
\code{\link{k_squeeze}()},
\code{\link{k_stack}()},
\code{\link{k_std}()},
\code{\link{k_stft}()},
\code{\link{k_stop_gradient}()},
\code{\link{k_subtract}()},
\code{\link{k_sum}()},
\code{\link{k_swapaxes}()},
\code{\link{k_take_along_axis}()},
\code{\link{k_take}()},
\code{\link{k_tanh}()},
\code{\link{k_tan}()},
\code{\link{k_tensordot}()},
\code{\link{k_tile}()},
\code{\link{k_top_k}()},
\code{\link{k_trace}()},
\code{\link{k_transpose}()},
\code{\link{k_tril}()},
\code{\link{k_triu}()},
\code{\link{k_tri}()},
\code{\link{k_true_divide}()},
\code{\link{k_unstack}()},
\code{\link{k_var}()},
\code{\link{k_vdot}()},
\code{\link{k_vstack}()},
\code{\link{k_where}()},
\code{\link{k_while_loop}()},
\code{\link{k_zeros_like}()},
\code{\link{k_zeros}()}
}
\concept{core ops}
\concept{ops}
