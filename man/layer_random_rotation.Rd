% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-preprocessing.R
\name{layer_random_rotation}
\alias{layer_random_rotation}
\title{A preprocessing layer which randomly rotates images during training.}
\usage{
layer_random_rotation(
  object,
  factor,
  fill_mode = "reflect",
  interpolation = "bilinear",
  seed = NULL,
  fill_value = 0,
  value_range = list(0L, 255L),
  data_format = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{factor}{a float represented as fraction of 2 Pi, or a tuple of size 2
representing lower and upper bound for rotating clockwise and
counter-clockwise. A positive values means rotating
counter clock-wise,
while a negative value means clock-wise.
When represented as a single
float, this value is used for both the upper and lower bound.
For instance, \verb{factor=(-0.2, 0.3)}
results in an output rotation by a random
amount in the range \verb{[-20\% * 2pi, 30\% * 2pi]}.
\code{factor=0.2} results in an
output rotating by a random amount
in the range \verb{[-20\% * 2pi, 20\% * 2pi]}.}

\item{fill_mode}{Points outside the boundaries of the input are filled
according to the given mode
(one of \verb{\{"constant", "reflect", "wrap", "nearest"\}}).
- \emph{reflect}: \verb{(d c b a | a b c d | d c b a)}
The input is extended by reflecting about
the edge of the last pixel.
- \emph{constant}: \verb{(k k k k | a b c d | k k k k)}
The input is extended by
filling all values beyond the edge with
the same constant value k = 0.
- \emph{wrap}: \verb{(a b c d | a b c d | a b c d)} The input is extended by
wrapping around to the opposite edge.
- \emph{nearest}: \verb{(a a a a | a b c d | d d d d)}
The input is extended by the nearest pixel.}

\item{interpolation}{Interpolation mode. Supported values: \code{"nearest"},
\code{"bilinear"}.}

\item{seed}{Integer. Used to create a random seed.}

\item{fill_value}{a float represents the value to be filled outside
the boundaries when \code{fill_mode="constant"}.}

\item{value_range}{see description}

\item{data_format}{see description}

\item{...}{Passed on to the Python callable}
}
\description{
This layer will apply random rotations to each image, filling empty space
according to \code{fill_mode}.

By default, random rotations are only applied during training.
At inference time, the layer does nothing. If you need to apply random
rotations at inference time, set \code{training} to True when calling the layer.

Input pixel values can be of any range (e.g. \verb{[0., 1.)} or \verb{[0, 255]}) and
of integer or floating point dtype.
By default, the layer will output floats.

\strong{Note:} This layer is safe to use inside a \code{tf.data} pipeline
(independently of which backend you're using).
}
\section{Input Shape}{
3D (unbatched) or 4D (batched) tensor with shape:
\verb{(..., height, width, channels)}, in \code{"channels_last"} format
}

\section{Output Shape}{
3D (unbatched) or 4D (batched) tensor with shape:
\verb{(..., height, width, channels)}, in \code{"channels_last"} format
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/RandomRotation}
}

Other preprocessing layers: 
\code{\link{layer_category_encoding}()},
\code{\link{layer_center_crop}()},
\code{\link{layer_discretization}()},
\code{\link{layer_feature_space}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_normalization}()},
\code{\link{layer_random_brightness}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_resizing}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_text_vectorization}()}
}
\concept{preprocessing layers}
