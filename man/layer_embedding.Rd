% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-layers-core.R, R/layers-core.R
\name{layer_embedding}
\alias{layer_embedding}
\title{Turns positive integers (indexes) into dense vectors of fixed size.}
\usage{
layer_embedding(
  object,
  input_dim,
  output_dim,
  embeddings_initializer = "uniform",
  embeddings_regularizer = NULL,
  embeddings_constraint = NULL,
  mask_zero = FALSE,
  ...
)

layer_embedding(
  object,
  input_dim,
  output_dim,
  embeddings_initializer = "uniform",
  embeddings_regularizer = NULL,
  embeddings_constraint = NULL,
  mask_zero = FALSE,
  ...
)
}
\arguments{
\item{input_dim}{Integer. Size of the vocabulary,
i.e. maximum integer index + 1.}

\item{output_dim}{Integer. Dimension of the dense embedding.}

\item{embeddings_initializer}{Initializer for the \code{embeddings}
matrix (see \code{keras.initializers}).}

\item{embeddings_regularizer}{Regularizer function applied to
the \code{embeddings} matrix (see \code{keras.regularizers}).}

\item{embeddings_constraint}{Constraint function applied to
the \code{embeddings} matrix (see \code{keras.constraints}).}

\item{mask_zero}{Boolean, whether or not the input value 0 is a special
"padding" value that should be masked out.
This is useful when using recurrent layers which
may take variable length input. If this is \code{True},
then all subsequent layers in the model need
to support masking or an exception will be raised.
If mask_zero is set to True, as a consequence,
index 0 cannot be used in the vocabulary (input_dim should
equal size of vocabulary + 1).}
}
\description{
e.g. \verb{[[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]}

This layer can only be used on positive integer inputs of a fixed range.

e.g. \verb{[[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]}

This layer can only be used on positive integer inputs of a fixed range.
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{model = keras_core.Sequential()
model.add(keras_core.layers.Embedding(1000, 64, input_length=10))
# The model will take as input an integer matrix of size (batch,
# input_length), and the largest integer (i.e. word index) in the input
# should be no larger than 999 (vocabulary size).
# Now model.output_shape is (None, 10, 64), where `None` is the batch
# dimension.
input_array = np.random.randint(1000, size=(32, 10))
model.compile('rmsprop', 'mse')
output_array = model.predict(input_array)
print(output_array.shape)
# (32, 10, 64)
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{model = keras_core.Sequential()
model.add(keras_core.layers.Embedding(1000, 64, input_length=10))
# The model will take as input an integer matrix of size (batch,
# input_length), and the largest integer (i.e. word index) in the input
# should be no larger than 999 (vocabulary size).
# Now model.output_shape is (None, 10, 64), where `None` is the batch
# dimension.
input_array = np.random.randint(1000, size=(32, 10))
model.compile('rmsprop', 'mse')
output_array = model.predict(input_array)
print(output_array.shape)
# (32, 10, 64)
}\if{html}{\out{</div>}}
}

\section{Input Shape}{
2D tensor with shape: \verb{(batch_size, input_length)}.

2D tensor with shape: \verb{(batch_size, input_length)}.
}

\section{Output Shape}{
\if{html}{\out{<div class="sourceCode">}}\preformatted{3D tensor with shape: `(batch_size, input_length, output_dim)`.
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{3D tensor with shape: `(batch_size, input_length, output_dim)`.
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding}
}

\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding}
}

Other core layers: 
\code{\link{layer_dense}()},
\code{\link{layer_einsum_dense}()},
\code{\link{layer_identity}()},
\code{\link{layer_lambda}()},
\code{\link{layer_masking}()},
\code{\link{layer_wrapper}()}

Other core layers: 
\code{\link{layer_dense}()},
\code{\link{layer_einsum_dense}()},
\code{\link{layer_identity}()},
\code{\link{layer_lambda}()},
\code{\link{layer_masking}()},
\code{\link{layer_wrapper}()}
}
\concept{core layers}
