% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-applications.R
\name{application_efficientnet_b5}
\alias{application_efficientnet_b5}
\title{Instantiates the EfficientNetB5 architecture.}
\usage{
application_efficientnet_b5(
  include_top = TRUE,
  weights = "imagenet",
  input_tensor = NULL,
  input_shape = NULL,
  pooling = NULL,
  classes = 1000L,
  classifier_activation = "softmax",
  ...
)
}
\arguments{
\item{include_top}{Whether to include the fully-connected
layer at the top of the network. Defaults to \code{True}.}

\item{weights}{One of \code{None} (random initialization),
\code{"imagenet"} (pre-training on ImageNet),
or the path to the weights file to be loaded.
Defaults to \code{"imagenet"}.}

\item{input_tensor}{Optional Keras tensor
(i.e. output of \code{layers.Input()})
to use as image input for the model.}

\item{input_shape}{Optional shape tuple, only to be specified
if \code{include_top} is False.
It should have exactly 3 inputs channels.}

\item{pooling}{Optional pooling mode for feature extraction
when \code{include_top} is \code{False}. Defaults to \code{None}.
- \code{None} means that the output of the model will be
the 4D tensor output of the
last convolutional layer.
- \code{avg} means that global average pooling
will be applied to the output of the
last convolutional layer, and thus
the output of the model will be a 2D tensor.
- \code{max} means that global max pooling will
be applied.}

\item{classes}{Optional number of classes to classify images
into, only to be specified if \code{include_top} is True, and
if no \code{weights} argument is specified. 1000 is how many
ImageNet classes there are. Defaults to \code{1000}.}

\item{classifier_activation}{A \code{str} or callable. The activation function to use
on the "top" layer. Ignored unless \code{include_top=True}. Set
\code{classifier_activation=None} to return the logits of the "top" layer.
Defaults to \code{'softmax'}.
When loading pretrained weights, \code{classifier_activation} can only
be \code{None} or \code{"softmax"}.}
}
\description{
This function returns a Keras image classification model,
optionally loaded with weights pre-trained on ImageNet.

For image classification use cases, see
\href{https://keras.io/api/applications/#usage-examples-for-image-classification-models}{this page for detailed examples}.

For transfer learning use cases, make sure to read the
\href{https://keras.io/guides/transfer_learning/}{guide to transfer learning & fine-tuning}.
}
\section{Reference}{
\itemize{
\item \href{https://arxiv.org/abs/1905.11946}{EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks} (ICML 2019)
}
}

\section{Note}{
each Keras Application expects a specific kind of input preprocessing.
For EfficientNet, input preprocessing is included as part of the model
(as a \code{Rescaling} layer), and thus
\code{keras.applications.efficientnet.preprocess_input} is actually a
pass-through function. EfficientNet models expect their inputs to be float
tensors of pixels with values in the \verb{[0-255]} range.
}

\section{Returns}{
\if{html}{\out{<div class="sourceCode">}}\preformatted{A model instance.
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/applications/EfficientNetB5}
}
}
