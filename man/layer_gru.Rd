% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-recurrent.R
\name{layer_gru}
\alias{layer_gru}
\title{Gated Recurrent Unit - Cho et al.}
\usage{
layer_gru(x, units, activation = "tanh",
  recurrent_activation = "hard_sigmoid", use_bias = TRUE,
  return_sequences = FALSE, go_backwards = FALSE, stateful = FALSE,
  unroll = FALSE, implementation = 0L,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal", bias_initializer = "zeros",
  kernel_regularizer = NULL, recurrent_regularizer = NULL,
  bias_regularizer = NULL, activity_regularizer = NULL,
  kernel_constraint = NULL, recurrent_constraint = NULL,
  bias_constraint = NULL, dropout = 0, recurrent_dropout = 0,
  input_shape = NULL)
}
\arguments{
\item{x}{Model or layer}

\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use. If you don't specify anything,
no activation is applied (ie. "linear" activation: \code{a(x) = x}).}

\item{recurrent_activation}{Activation function to use for the recurrent
step.}

\item{use_bias}{Boolean, whether the layer uses a bias vector.}

\item{return_sequences}{Boolean. Whether to return the last output in the
output sequence, or the full sequence.}

\item{go_backwards}{Boolean (default FALSE). If TRUE, process the input
sequence backwards.}

\item{stateful}{Boolean (default FALSE). If TRUE, the last state for each
sample at index i in a batch will be used as initial state for the sample
of index i in the following batch.}

\item{unroll}{Boolean (default FALSE). If TRUE, the network will be unrolled,
else a symbolic loop will be used. Unrolling can speed-up a RNN, although
it tends to be more memory-intensive. Unrolling is only suitable for short
sequences.}

\item{implementation}{one of {0, 1, or 2}. If set to 0, the RNN will use an
implementation that uses fewer, larger matrix products, thus running faster
on CPU but consuming more memory. If set to 1, the RNN will use more matrix
products, but smaller ones, thus running slower (may actually be faster on
GPU) while consuming less memory. If set to 2 (LSTM/GRU only), the RNN will
combine the input gate, the forget gate and the output gate into a single
matrix, enabling more time-efficient parallelization on the GPU.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix, used
for the linear transformation of the inputs..}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel} weights
matrix, used for the linear transformation of the recurrent state..}

\item{bias_initializer}{Initializer for the bias vector.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel}
weights matrix.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation")..}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix.}

\item{bias_constraint}{Constraint function applied to the bias vector.}

\item{dropout}{Float between 0 and 1. Fraction of the units to drop for the
linear transformation of the inputs.}

\item{recurrent_dropout}{Float between 0 and 1. Fraction of the units to drop
for the linear transformation of the recurrent state.}

\item{input_shape}{Dimensionality of the input (integer) not including the
samples axis. This argument is required when using this layer as the first
layer in a model.}
}
\description{
Gated Recurrent Unit - Cho et al.
}
\section{References}{

\itemize{
\item \href{https://arxiv.org/abs/1409.1259}{On the Properties of Neural Machine Translation:Encoder-Decoder Approaches}
\item \href{http://arxiv.org/abs/1412.3555v1}{EmpiricalEvaluation of Gated Recurrent Neural Networks on SequenceModeling}
\item \href{http://arxiv.org/abs/1512.05287}{A Theoretically GroundedApplication of Dropout in Recurrent NeuralNetworks}
}
}

\seealso{
Other recurrent layers: \code{\link{layer_lstm}},
  \code{\link{layer_simple_rnn}}
}
