% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-convolutional.R
\name{layer_separable_conv_1d}
\alias{layer_separable_conv_1d}
\title{1D separable convolution layer.}
\usage{
layer_separable_conv_1d(
  object,
  filters,
  kernel_size,
  strides = 1L,
  padding = "valid",
  data_format = NULL,
  dilation_rate = 1L,
  depth_multiplier = 1L,
  activation = NULL,
  use_bias = TRUE,
  depthwise_initializer = "glorot_uniform",
  pointwise_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  depthwise_regularizer = NULL,
  pointwise_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  depthwise_constraint = NULL,
  pointwise_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{filters}{int, the dimensionality of the output space (i.e. the number
of filters in the pointwise convolution).}

\item{kernel_size}{int or list of 1 integers, specifying the size of the
depthwise convolution window.}

\item{strides}{int or list of 1 integers, specifying the stride length
of the depthwise convolution. If only one int is specified, the same
stride size will be used for all dimensions. \code{strides > 1} is
incompatible with \code{dilation_rate > 1}.}

\item{padding}{string, either \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding evenly to
the left/right or up/down of the input such that output has the same
height/width dimension as the input.}

\item{data_format}{string, either \code{"channels_last"} or \code{"channels_first"}.
The ordering of the dimensions in the inputs. \code{"channels_last"}
corresponds to inputs with shape \verb{(batch, steps, features)}
while \code{"channels_first"} corresponds to inputs with shape
\verb{(batch, features, steps)}. It defaults to the \code{image_data_format}
value found in your Keras config file at \verb{~/.keras/keras.json}.
If you never set it, then it will be \code{"channels_last"}.}

\item{dilation_rate}{int or list of 1 integers, specifying the dilation
rate to use for dilated convolution. If only one int is specified,
the same dilation rate will be used for all dimensions.}

\item{depth_multiplier}{The number of depthwise convolution output channels
for each input channel. The total number of depthwise convolution
output channels will be equal to \code{input_channel * depth_multiplier}.}

\item{activation}{Activation function. If \code{NULL}, no activation is applied.}

\item{use_bias}{bool, if \code{TRUE}, bias will be added to the output.}

\item{depthwise_initializer}{An initializer for the depthwise convolution
kernel. If NULL, then the default initializer (\code{"glorot_uniform"})
will be used.}

\item{pointwise_initializer}{An initializer for the pointwise convolution
kernel. If NULL, then the default initializer (\code{"glorot_uniform"})
will be used.}

\item{bias_initializer}{An initializer for the bias vector. If NULL, the
default initializer ('"zeros"') will be used.}

\item{depthwise_regularizer}{Optional regularizer for the depthwise
convolution kernel.}

\item{pointwise_regularizer}{Optional regularizer for the pointwise
convolution kernel.}

\item{bias_regularizer}{Optional regularizer for the bias vector.}

\item{activity_regularizer}{Optional regularizer function for the output.}

\item{depthwise_constraint}{Optional projection function to be applied to the
depthwise kernel after being updated by an \code{Optimizer} (e.g. used
for norm constraints or value constraints for layer weights). The
function must take as input the unprojected variable and must return
the projected variable (which must have the same shape).}

\item{pointwise_constraint}{Optional projection function to be applied to the
pointwise kernel after being updated by an \code{Optimizer}.}

\item{bias_constraint}{Optional projection function to be applied to the
bias after being updated by an \code{Optimizer}.}

\item{...}{Passed on to the Python callable}
}
\value{
A 3D tensor representing
\code{activation(separable_conv1d(inputs, kernel) + bias)}.
}
\description{
This layer performs a depthwise convolution that acts separately on
channels, followed by a pointwise convolution that mixes channels.
If \code{use_bias} is TRUE and a bias initializer is provided,
it adds a bias vector to the output. It then optionally applies an
activation function to produce the final output.
}
\section{Input Shape}{
\itemize{
\item If \code{data_format="channels_last"}:
A 3D tensor with shape: \verb{(batch_shape, steps, channels)}
\item If \code{data_format="channels_first"}:
A 3D tensor with shape: \verb{(batch_shape, channels, steps)}
}
}

\section{Output Shape}{
\itemize{
\item If \code{data_format="channels_last"}:
A 3D tensor with shape: \verb{(batch_shape, new_steps, filters)}
\item If \code{data_format="channels_first"}:
A 3D tensor with shape: \verb{(batch_shape, filters, new_steps)}
}
}

\section{Examples}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- random_uniform(c(4, 10, 12))
y <- layer_separable_conv_1d(x, 3, 2, 2, activation='relu')
y$shape
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## TensorShape([4, 5, 3])
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/convolution_layers/separable_convolution1d#separableconv1d-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/SeparableConv1D}
}

Other convolutional layers: 
\code{\link{layer_conv_1d_transpose}()},
\code{\link{layer_conv_1d}()},
\code{\link{layer_conv_2d_transpose}()},
\code{\link{layer_conv_2d}()},
\code{\link{layer_conv_3d_transpose}()},
\code{\link{layer_conv_3d}()},
\code{\link{layer_depthwise_conv_1d}()},
\code{\link{layer_depthwise_conv_2d}()},
\code{\link{layer_separable_conv_2d}()}
}
\concept{convolutional layers}
