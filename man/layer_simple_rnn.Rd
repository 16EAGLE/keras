% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-rnn.R
\name{layer_simple_rnn}
\alias{layer_simple_rnn}
\title{Fully-connected RNN where the output is to be fed back as the new input.}
\usage{
layer_simple_rnn(
  object,
  units,
  activation = "tanh",
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  recurrent_initializer = "orthogonal",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  recurrent_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  recurrent_constraint = NULL,
  bias_constraint = NULL,
  dropout = 0,
  recurrent_dropout = 0,
  return_sequences = FALSE,
  return_state = FALSE,
  go_backwards = FALSE,
  stateful = FALSE,
  unroll = FALSE,
  seed = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Activation function to use.
Default: hyperbolic tangent (\code{tanh}).
If you pass NULL, no activation is applied
(ie. "linear" activation: \code{a(x) = x}).}

\item{use_bias}{Boolean, (default \code{TRUE}), whether the layer uses
a bias vector.}

\item{kernel_initializer}{Initializer for the \code{kernel} weights matrix,
used for the linear transformation of the inputs. Default:
\code{"glorot_uniform"}.}

\item{recurrent_initializer}{Initializer for the \code{recurrent_kernel}
weights matrix, used for the linear transformation of the recurrent
state.  Default: \code{"orthogonal"}.}

\item{bias_initializer}{Initializer for the bias vector. Default: \code{"zeros"}.}

\item{kernel_regularizer}{Regularizer function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_regularizer}{Regularizer function applied to the
\code{recurrent_kernel} weights matrix. Default: \code{NULL}.}

\item{bias_regularizer}{Regularizer function applied to the bias vector.
Default: \code{NULL}.}

\item{activity_regularizer}{Regularizer function applied to the output of the
layer (its "activation"). Default: \code{NULL}.}

\item{kernel_constraint}{Constraint function applied to the \code{kernel} weights
matrix. Default: \code{NULL}.}

\item{recurrent_constraint}{Constraint function applied to the
\code{recurrent_kernel} weights matrix.  Default: \code{NULL}.}

\item{bias_constraint}{Constraint function applied to the bias vector.
Default: \code{NULL}.}

\item{dropout}{Float between 0 and 1.
Fraction of the units to drop for the linear transformation
of the inputs. Default: 0.}

\item{recurrent_dropout}{Float between 0 and 1.
Fraction of the units to drop for the linear transformation of the
recurrent state. Default: 0.}

\item{return_sequences}{Boolean. Whether to return the last output
in the output sequence, or the full sequence. Default: \code{FALSE}.}

\item{return_state}{Boolean. Whether to return the last state
in addition to the output. Default: \code{FALSE}.}

\item{go_backwards}{Boolean (default: \code{FALSE}).
If \code{TRUE}, process the input sequence backwards and return the
reversed sequence.}

\item{stateful}{Boolean (default: \code{FALSE}). If \code{TRUE}, the last state
for each sample at index i in a batch will be used as initial
state for the sample of index i in the following batch.}

\item{unroll}{Boolean (default: \code{FALSE}).
If \code{TRUE}, the network will be unrolled,
else a symbolic loop will be used.
Unrolling can speed-up a RNN,
although it tends to be more memory-intensive.
Unrolling is only suitable for short sequences.}

\item{seed}{Initial seed for the random number generator}

\item{...}{Passed on to the Python callable}
}
\description{
Fully-connected RNN where the output is to be fed back as the new input.
}
\section{Call Arguments}{
\itemize{
\item \code{sequence}: A 3D tensor, with shape \verb{[batch, timesteps, feature]}.
\item \code{mask}: Binary tensor of shape \verb{[batch, timesteps]} indicating whether
a given timestep should be masked. An individual \code{TRUE} entry
indicates that the corresponding timestep should be utilized,
while a \code{FALSE} entry indicates that the corresponding timestep
should be ignored.
\item \code{training}: Python boolean indicating whether the layer should behave in
training mode or in inference mode.
This argument is passed to the cell when calling it.
This is only relevant if \code{dropout} or \code{recurrent_dropout} is used.
\item \code{initial_state}: List of initial state tensors to be passed to the first
call of the cell.
}
}

\section{Examples}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{inputs <- random_uniform(c(32, 10, 8))
simple_rnn <- layer_simple_rnn(units = 4)
output <- simple_rnn(inputs)  # The output has shape `(32, 4)`.
simple_rnn <- layer_simple_rnn(
    units = 4, return_sequences=TRUE, return_state=TRUE
)
# whole_sequence_output has shape `(32, 10, 4)`.
# final_state has shape `(32, 4)`.
c(whole_sequence_output, final_state) \%<-\% simple_rnn(inputs)
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/recurrent_layers/simple_rnn#simplernn-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/SimpleRNN}
}

Other recurrent layers: 
\code{\link{bidirectional}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_gru_cell}()},
\code{\link{layer_gru}()},
\code{\link{layer_lstm_cell}()},
\code{\link{layer_lstm}()},
\code{\link{layer_rnn}()},
\code{\link{layer_simple_rnn_cell}()},
\code{\link{layer_stacked_rnn_cells}()},
\code{\link{layer_time_distributed}()}
}
\concept{recurrent layers}
