% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-layers-convolutional.R
\name{layer_conv_2d}
\alias{layer_conv_2d}
\title{2D convolution layer.}
\usage{
layer_conv_2d(
  object,
  filters,
  kernel_size,
  strides = list(1L, 1L),
  padding = "valid",
  data_format = NULL,
  dilation_rate = list(1L, 1L),
  groups = 1L,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{filters}{int, the dimension of the output space (the number of filters
in the convolution).}

\item{kernel_size}{int or tuple/list of 2 integer, specifying the size of the
convolution window.}

\item{strides}{int or tuple/list of 2 integer, specifying the stride length
of the convolution. \code{strides > 1} is incompatible with
\code{dilation_rate > 1}.}

\item{padding}{string, either \code{"valid"} or \code{"same"} (case-insensitive).
\code{"valid"} means no padding. \code{"same"} results in padding evenly to
the left/right or up/down of the input such that output has the same
height/width dimension as the input.}

\item{data_format}{string, either \code{"channels_last"} or \code{"channels_first"}.
The ordering of the dimensions in the inputs. \code{"channels_last"}
corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}
while \code{"channels_first"} corresponds to inputs with shape
\verb{(batch_size, channels, height, width)}. It defaults to the
\code{image_data_format} value found in your Keras config file at
\verb{~/.keras/keras.json}. If you never set it, then it will be
\code{"channels_last"}.}

\item{dilation_rate}{int or tuple/list of 2 integers, specifying the dilation
rate to use for dilated convolution.}

\item{groups}{A positive int specifying the number of groups in which the
input is split along the channel axis. Each group is convolved
separately with \verb{filters // groups} filters. The output is the
concatenation of all the \code{groups} results along the channel axis.
Input channels and \code{filters} must both be divisible by \code{groups}.}

\item{activation}{Activation function. If \code{None}, no activation is applied.}

\item{use_bias}{bool, if \code{True}, bias will be added to the output.}

\item{kernel_initializer}{Initializer for the convolution kernel. If \code{None},
the default initializer (\code{"glorot_uniform"}) will be used.}

\item{bias_initializer}{Initializer for the bias vector. If \code{None}, the
default initializer (\code{"zeros"}) will be used.}

\item{kernel_regularizer}{Optional regularizer for the convolution kernel.}

\item{bias_regularizer}{Optional regularizer for the bias vector.}

\item{activity_regularizer}{Optional regularizer function for the output.}

\item{kernel_constraint}{Optional projection function to be applied to the
kernel after being updated by an \code{Optimizer} (e.g. used to implement
norm constraints or value constraints for layer weights). The
function must take as input the unprojected variable and must return
the projected variable (which must have the same shape). Constraints
are not safe to use when doing asynchronous distributed training.}

\item{bias_constraint}{Optional projection function to be applied to the
bias after being updated by an \code{Optimizer}.}
}
\description{
This layer creates a convolution kernel that is convolved with the layer
input over a single spatial (or temporal) dimension to produce a tensor of
outputs. If \code{use_bias} is True, a bias vector is created and added to the
outputs. Finally, if \code{activation} is not \code{None}, it is applied to the
outputs as well.
}
\section{Input Shape}{
\itemize{
\item If \code{data_format="channels_last"}:
A 4D tensor with shape: \verb{(batch_size, height, width, channels)}
\item If \code{data_format="channels_first"}:
A 4D tensor with shape: \verb{(batch_size, channels, height, width)}
}
}

\section{Output Shape}{
\itemize{
\item If \code{data_format="channels_last"}:
A 4D tensor with shape: \verb{(batch_size, new_height, new_width, filters)}
\item If \code{data_format="channels_first"}:
A 4D tensor with shape: \verb{(batch_size, filters, new_height, new_width)}
}
}

\section{Returns}{
A 4D tensor representing \code{activation(conv2d(inputs, kernel) + bias)}.
}

\section{Raises}{
ValueError: when both \code{strides > 1} and \code{dilation_rate > 1}.
}

\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{x = np.random.rand(4, 10, 10, 128)
y = keras_core.layers.Conv2D(32, 3, activation='relu')(x)
print(y.shape)
# (4, 8, 8, 32)
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D}
}

Other convolutional layers: 
\code{\link{layer_conv_1d_transpose}()},
\code{\link{layer_conv_1d}()},
\code{\link{layer_conv_2d_transpose}()},
\code{\link{layer_conv_3d_transpose}()},
\code{\link{layer_conv_3d}()},
\code{\link{layer_depthwise_conv_1d}()},
\code{\link{layer_depthwise_conv_2d}()},
\code{\link{layer_separable_conv_1d}()},
\code{\link{layer_separable_conv_2d}()}
}
\concept{convolutional layers}
