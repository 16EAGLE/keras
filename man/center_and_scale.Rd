% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocessing.R
\name{center_and_scale}
\alias{center_and_scale}
\alias{fit_center_and_scale}
\alias{center_and_scale}
\title{Normalize columns of a matrix by centering and scaling their values}
\usage{
fit_center_and_scale(x)

center_and_scale(x, values)
}
\arguments{
\item{x}{A matrix}

\item{values}{Scaling values to apply (\code{mean} and \code{std}).}
}
\value{
For \code{fit_center_and_scale()}, a list of values (\code{mean}) and \code{std})
to be passed to \code{apply_center_and_scale()}. For
\code{apply_center_and_scale()}, the matrix \code{x} scaled using the supplied
values via the R \code{\link[=scale]{scale()}} function.
}
\description{
For each column of a matrix, subtract the mean of the column and divide by
the standard deviation, so that the column is centered around 0 and has a
unit standard deviation.
}
\details{
The R \code{\link[=scale]{scale()}} function is similar in purpose to these functions,
however it operates on a single matrix. In contrast, these functions
compute ("fit") the scales on training data and then subsequently apply
those scales on both training and test data. This ensures that no aspect
of the test data influences data processed in the training phase.
}
\examples{
\dontrun{

# load data
library(keras)
dataset <- dataset_boston_housing()
c(c(train_data, train_targets), c(test_data, test_targets)) \%<-\% dataset

# normalize data
values <- fit_center_and_scale(train_data)
train_data <- center_and_scale(train_data, values)
test_data <- center_and_scale(train_data, values)
}

}
