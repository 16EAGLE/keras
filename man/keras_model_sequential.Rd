% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-creation.R
\name{keras_model_sequential}
\alias{keras_model_sequential}
\title{Keras Model composed of a linear stack of layers}
\usage{
keras_model_sequential(layers = NULL, name = NULL, ...)
}
\arguments{
\item{layers}{List of layers to add to the model}

\item{name}{Name of model}

\item{...}{
  Arguments passed on to \code{\link[=sequential_model_input_layer]{sequential_model_input_layer}}
  \describe{
    \item{\code{input_shape}}{A shape integer vector,
not including the batch size.
For instance, \code{shape=c(32)} indicates that the expected input
will be batches of 32-dimensional vectors. Elements of this shape
can be \code{NA}; \code{NA} elements represent dimensions where the shape
is not known and may vary (e.g. sequence length).}
    \item{\code{input_batch_size}}{Optional static batch size (integer).}
    \item{\code{input_dtype}}{The data type expected by the input, as a string
(e.g. \code{"float32"}, \code{"int32"}...)}
    \item{\code{input_sparse}}{A boolean specifying whether the expected input will be sparse
tensors. Note that, if \code{sparse} is \code{FALSE}, sparse tensors can still
be passed into the input - they will be densified with a default
value of \code{0}. This feature is only supported with the TensorFlow
backend. Defaults to \code{FALSE}.}
    \item{\code{input_batch_shape}}{An optional way to specify \code{batch_size} and \code{input_shape} as one argument.}
    \item{\code{input_name}}{Optional name string for the layer.
Should be unique in a model (do not reuse the same name twice).
It will be autogenerated if it isn't provided.}
    \item{\code{input_tensor}}{Optional existing tensor to wrap into the \code{InputLayer}.
If set, the layer will use this tensor rather
than creating a new placeholder tensor.}
  }}
}
\description{
Keras Model composed of a linear stack of layers
}
\note{
If any arguments are provided to \code{...}, then the sequential model is
initialized with a \code{InputLayer} instance. If not, then the model layer
shapes, including the final model output shape, will not be available until
the model is built, either by calling the model with an input tensor/array
like \code{model(input)}, (possibly via \code{fit()}/\code{evaluate()}/\code{predict()}), or by
explicitly calling \code{model$build(input_shape)}.
}
\examples{
\dontrun{

library(keras3)

model <- keras_model_sequential()
model \%>\%
  layer_dense(units = 32, input_shape = c(784)) \%>\%
  layer_activation('relu') \%>\%
  layer_dense(units = 10) \%>\%
  layer_activation('softmax')

model \%>\% compile(
  optimizer = 'rmsprop',
  loss = 'categorical_crossentropy',
  metrics = c('accuracy')
)

# alternative way to provide input shape
model <- keras_model_sequential(input_shape = c(784)) \%>\%
  layer_dense(units = 32) \%>\%
  layer_activation('relu') \%>\%
  layer_dense(units = 10) \%>\%
  layer_activation('softmax')

}
}
\seealso{
Other model functions: 
\code{\link{get_config}()},
\code{\link{get_layer}()},
\code{\link{keras_model}()},
\code{\link{pop_layer}()},
\code{\link{summary.keras.src.models.model.Model}()}

Other model creation: 
\code{\link{keras_model}()}
}
\concept{model creation}
\concept{model functions}
