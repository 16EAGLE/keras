% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogen-losses.R
\name{loss_binary_crossentropy}
\alias{loss_binary_crossentropy}
\title{Computes the cross-entropy loss between true labels and predicted labels.}
\usage{
loss_binary_crossentropy(
  y_true,
  y_pred,
  from_logits = FALSE,
  label_smoothing = 0,
  axis = -1L,
  ...,
  reduction = "sum_over_batch_size",
  name = "binary_crossentropy"
)
}
\arguments{
\item{y_true}{Ground truth values. shape = \verb{[batch_size, d0, .. dN]}.}

\item{y_pred}{The predicted values. shape = \verb{[batch_size, d0, .. dN]}.}

\item{from_logits}{Whether \code{y_pred} is expected to be a logits tensor. By
default, we assume that \code{y_pred} encodes a probability distribution.}

\item{label_smoothing}{Float in \verb{[0, 1]}. If > \code{0} then smooth the labels by
squeezing them towards 0.5, that is,
using \code{1. - 0.5 * label_smoothing} for the target class
and \code{0.5 * label_smoothing} for the non-target class.}

\item{axis}{The axis along which the mean is computed. Defaults to \code{-1}.}

\item{...}{Passed on to the Python callable}

\item{reduction}{Type of reduction to apply to the loss. In almost all cases
this should be \code{"sum_over_batch_size"}.
Supported options are \code{"sum"}, \code{"sum_over_batch_size"} or \code{None}.}

\item{name}{Optional name for the loss instance.}
}
\description{
Use this cross-entropy loss for binary (0 or 1) classification applications.
The loss function requires the following inputs:
\itemize{
\item \code{y_true} (true label): This is either 0 or 1.
\item \code{y_pred} (predicted value): This is the model's prediction, i.e, a single
floating-point value which either represents a
\verb{[logit](https://en.wikipedia.org/wiki/Logit), (i.e, value in [-inf, inf]}
when \code{from_logits=True}) or a probability (i.e, value in \verb{[0., 1.]} when
\code{from_logits=False}).
}
}
\section{Examples}{
\if{html}{\out{<div class="sourceCode python">}}\preformatted{y_true = [[0, 1], [0, 0]]
y_pred = [[0.6, 0.4], [0.4, 0.6]]
loss = keras.losses.binary_crossentropy(y_true, y_pred)
assert loss.shape == (2,)
loss
# array([0.916 , 0.714], dtype=float32)
}\if{html}{\out{</div>}}

\strong{Recommended Usage:} (set \code{from_logits=True})

With \code{compile()} API:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{model.compile(
    loss=keras.losses.BinaryCrossentropy(from_logits=True),
    ...
)
}\if{html}{\out{</div>}}

As a standalone function:

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Example 1: (batch_size = 1, number of samples = 4)
y_true = [0, 1, 0, 0]
y_pred = [-18.6, 0.51, 2.94, -12.8]
bce = keras.losses.BinaryCrossentropy(from_logits=True)
bce(y_true, y_pred)
# 0.865
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Example 2: (batch_size = 2, number of samples = 4)
y_true = [[0, 1], [0, 0]]
y_pred = [[-18.6, 0.51], [2.94, -12.8]]
# Using default 'auto'/'sum_over_batch_size' reduction type.
bce = keras.losses.BinaryCrossentropy(from_logits=True)
bce(y_true, y_pred)
# 0.865
# Using 'sample_weight' attribute
bce(y_true, y_pred, sample_weight=[0.8, 0.2])
# 0.243
# Using 'sum' reduction` type.
bce = keras.losses.BinaryCrossentropy(from_logits=True,
    reduction="sum")
bce(y_true, y_pred)
# 1.730
# Using 'none' reduction type.
bce = keras.losses.BinaryCrossentropy(from_logits=True,
    reduction=None)
bce(y_true, y_pred)
# array([0.235, 1.496], dtype=float32)
}\if{html}{\out{</div>}}

\strong{Default Usage:} (set \code{from_logits=False})

\if{html}{\out{<div class="sourceCode python">}}\preformatted{# Make the following updates to the above "Recommended Usage" section
# 1. Set `from_logits=False`
keras.losses.BinaryCrossentropy() # OR ...('from_logits=False')
# 2. Update `y_pred` to use probabilities instead of logits
y_pred = [0.6, 0.3, 0.2, 0.8] # OR [[0.6, 0.3], [0.2, 0.8]]
}\if{html}{\out{</div>}}
}

\section{Returns}{
Binary crossentropy loss value. shape = \verb{[batch_size, d0, .. dN-1]}.
}

\seealso{
\itemize{
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/losses/BinaryCrossentropy}
}

Other loss: 
\code{\link{loss_binary_focal_crossentropy}()},
\code{\link{loss_categorical_crossentropy}()},
\code{\link{loss_categorical_focal_crossentropy}()},
\code{\link{loss_categorical_hinge}()},
\code{\link{loss_cosine_similarity}()},
\code{\link{loss_hinge}()},
\code{\link{loss_huber}()},
\code{\link{loss_kl_divergence}()},
\code{\link{loss_log_cosh}()},
\code{\link{loss_mean_absolute_error}()},
\code{\link{loss_mean_absolute_percentage_error}()},
\code{\link{loss_mean_squared_error}()},
\code{\link{loss_mean_squared_logarithmic_error}()},
\code{\link{loss_poisson}()},
\code{\link{loss_sparse_categorical_crossentropy}()},
\code{\link{loss_squared_hinge}()}
}
\concept{loss}
