% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers-rnn.R
\name{bidirectional}
\alias{bidirectional}
\title{Bidirectional wrapper for RNNs.}
\usage{
bidirectional(
  object,
  layer,
  merge_mode = "concat",
  weights = NULL,
  backward_layer = NULL,
  ...
)
}
\arguments{
\item{object}{Object to compose the layer with. A tensor, array, or sequential model.}

\item{layer}{\code{keras.layers.RNN} instance, such as
\code{keras.layers.LSTM} or \code{keras.layers.GRU}.
It could also be a \code{keras.layers.Layer} instance
that meets the following criteria:
\enumerate{
\item Be a sequence-processing layer (accepts 3D+ inputs).
\item Have a \code{go_backwards}, \code{return_sequences} and \code{return_state}
attribute (with the same semantics as for the \code{RNN} class).
\item Have an \code{input_spec} attribute.
\item Implement serialization via \code{get_config()} and \code{from_config()}.
Note that the recommended way to create new RNN layers is to write a
custom RNN cell and use it with \code{keras.layers.RNN}, instead of
subclassing \code{keras.layers.Layer} directly.
When \code{return_sequences} is \code{TRUE}, the output of the masked
timestep will be zero regardless of the layer's original
\code{zero_output_for_mask} value.
}}

\item{merge_mode}{Mode by which outputs of the forward and backward RNNs
will be combined. One of \verb{\{"sum", "mul", "concat", "ave", NULL\}}.
If \code{NULL}, the outputs will not be combined,
they will be returned as a list. Defaults to \code{"concat"}.}

\item{weights}{see description}

\item{backward_layer}{Optional \code{keras.layers.RNN},
or \code{keras.layers.Layer} instance to be used to handle
backwards input processing.
If \code{backward_layer} is not provided, the layer instance passed
as the \code{layer} argument will be used to generate the backward layer
automatically.
Note that the provided \code{backward_layer} layer should have properties
matching those of the \code{layer} argument, in particular
it should have the same values for \code{stateful}, \code{return_states},
\code{return_sequences}, etc. In addition, \code{backward_layer}
and \code{layer} should have different \code{go_backwards} argument values.
A \code{ValueError} will be raised if these requirements are not met.}

\item{...}{For forward/backward compatability.}
}
\description{
Bidirectional wrapper for RNNs.
}
\section{Call Arguments}{
The call arguments for this layer are the same as those of the
wrapped RNN layer. Beware that when passing the \code{initial_state}
argument during the call of this layer, the first half in the
list of elements in the \code{initial_state} list will be passed to
the forward RNN call and the last half in the list of elements
will be passed to the backward RNN call.
}

\section{Note}{
instantiating a \code{Bidirectional} layer from an existing RNN layer
instance will not reuse the weights state of the RNN layer instance -- the
\code{Bidirectional} layer will have freshly initialized weights.
}

\section{Examples}{
\if{html}{\out{<div class="sourceCode r">}}\preformatted{model <- keras_model_sequential(input_shape = c(5, 10)) \%>\%
  bidirectional(layer_lstm(units = 10, return_sequences = TRUE)) \%>\%
  bidirectional(layer_lstm(units = 10)) \%>\%
  layer_dense(5, activation = "softmax")

model \%>\% compile(loss = "categorical_crossentropy",
                  optimizer = "rmsprop")

# With custom backward layer
forward_layer <- layer_lstm(units = 10, return_sequences = TRUE)
backward_layer <- layer_lstm(units = 10, activation = "relu",
                             return_sequences = TRUE, go_backwards = TRUE)

model <- keras_model_sequential(input_shape = c(5, 10)) \%>\%
  bidirectional(forward_layer, backward_layer = backward_layer) \%>\%
  layer_dense(5, activation = "softmax")

model \%>\% compile(loss = "categorical_crossentropy",
                  optimizer = "rmsprop")
}\if{html}{\out{</div>}}
}

\seealso{
\itemize{
\item \url{https:/keras.io/api/layers/recurrent_layers/bidirectional#bidirectional-class}
\item \url{https://www.tensorflow.org/api_docs/python/tf/keras/layers/Bidirectional}
}

Other rnn layers: 
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_gru_cell}()},
\code{\link{layer_gru}()},
\code{\link{layer_lstm_cell}()},
\code{\link{layer_lstm}()},
\code{\link{layer_rnn}()},
\code{\link{layer_simple_rnn_cell}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_stacked_rnn_cells}()},
\code{\link{layer_time_distributed}()}

Other layers: 
\code{\link{Layer}()},
\code{\link{get_vocabulary}()},
\code{\link{layer_activation_elu}()},
\code{\link{layer_activation_leaky_relu}()},
\code{\link{layer_activation_parametric_relu}()},
\code{\link{layer_activation_relu}()},
\code{\link{layer_activation_softmax}()},
\code{\link{layer_activation}()},
\code{\link{layer_activity_regularization}()},
\code{\link{layer_additive_attention}()},
\code{\link{layer_add}()},
\code{\link{layer_attention}()},
\code{\link{layer_average_pooling_1d}()},
\code{\link{layer_average_pooling_2d}()},
\code{\link{layer_average_pooling_3d}()},
\code{\link{layer_average}()},
\code{\link{layer_batch_normalization}()},
\code{\link{layer_category_encoding}()},
\code{\link{layer_center_crop}()},
\code{\link{layer_concatenate}()},
\code{\link{layer_conv_1d_transpose}()},
\code{\link{layer_conv_1d}()},
\code{\link{layer_conv_2d_transpose}()},
\code{\link{layer_conv_2d}()},
\code{\link{layer_conv_3d_transpose}()},
\code{\link{layer_conv_3d}()},
\code{\link{layer_conv_lstm_1d}()},
\code{\link{layer_conv_lstm_2d}()},
\code{\link{layer_conv_lstm_3d}()},
\code{\link{layer_cropping_1d}()},
\code{\link{layer_cropping_2d}()},
\code{\link{layer_cropping_3d}()},
\code{\link{layer_dense}()},
\code{\link{layer_depthwise_conv_1d}()},
\code{\link{layer_depthwise_conv_2d}()},
\code{\link{layer_discretization}()},
\code{\link{layer_dot}()},
\code{\link{layer_dropout}()},
\code{\link{layer_einsum_dense}()},
\code{\link{layer_embedding}()},
\code{\link{layer_feature_space}()},
\code{\link{layer_flatten}()},
\code{\link{layer_gaussian_dropout}()},
\code{\link{layer_gaussian_noise}()},
\code{\link{layer_global_average_pooling_1d}()},
\code{\link{layer_global_average_pooling_2d}()},
\code{\link{layer_global_average_pooling_3d}()},
\code{\link{layer_global_max_pooling_1d}()},
\code{\link{layer_global_max_pooling_2d}()},
\code{\link{layer_global_max_pooling_3d}()},
\code{\link{layer_group_normalization}()},
\code{\link{layer_group_query_attention}()},
\code{\link{layer_gru_cell}()},
\code{\link{layer_gru}()},
\code{\link{layer_hashed_crossing}()},
\code{\link{layer_hashing}()},
\code{\link{layer_identity}()},
\code{\link{layer_input}()},
\code{\link{layer_integer_lookup}()},
\code{\link{layer_lambda}()},
\code{\link{layer_layer_normalization}()},
\code{\link{layer_lstm_cell}()},
\code{\link{layer_lstm}()},
\code{\link{layer_masking}()},
\code{\link{layer_max_pooling_1d}()},
\code{\link{layer_max_pooling_2d}()},
\code{\link{layer_max_pooling_3d}()},
\code{\link{layer_maximum}()},
\code{\link{layer_minimum}()},
\code{\link{layer_multi_head_attention}()},
\code{\link{layer_multiply}()},
\code{\link{layer_normalization}()},
\code{\link{layer_permute}()},
\code{\link{layer_random_brightness}()},
\code{\link{layer_random_contrast}()},
\code{\link{layer_random_crop}()},
\code{\link{layer_random_flip}()},
\code{\link{layer_random_rotation}()},
\code{\link{layer_random_translation}()},
\code{\link{layer_random_zoom}()},
\code{\link{layer_repeat_vector}()},
\code{\link{layer_rescaling}()},
\code{\link{layer_reshape}()},
\code{\link{layer_resizing}()},
\code{\link{layer_rnn}()},
\code{\link{layer_separable_conv_1d}()},
\code{\link{layer_separable_conv_2d}()},
\code{\link{layer_simple_rnn_cell}()},
\code{\link{layer_simple_rnn}()},
\code{\link{layer_spatial_dropout_1d}()},
\code{\link{layer_spatial_dropout_2d}()},
\code{\link{layer_spatial_dropout_3d}()},
\code{\link{layer_spectral_normalization}()},
\code{\link{layer_stacked_rnn_cells}()},
\code{\link{layer_string_lookup}()},
\code{\link{layer_subtract}()},
\code{\link{layer_tfsm}()},
\code{\link{layer_time_distributed}()},
\code{\link{layer_torch_module_wrapper}()},
\code{\link{layer_unit_normalization}()},
\code{\link{layer_upsampling_1d}()},
\code{\link{layer_upsampling_2d}()},
\code{\link{layer_upsampling_3d}()},
\code{\link{layer_zero_padding_1d}()},
\code{\link{layer_zero_padding_2d}()},
\code{\link{layer_zero_padding_3d}()}
}
\concept{layers}
\concept{rnn layers}
