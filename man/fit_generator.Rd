% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{fit_generator}
\alias{fit_generator}
\title{Fits the model on data yielded batch-by-batch by a generator.}
\usage{
fit_generator(model, generator, steps_per_epoch, epochs = 1, verbose = 1,
  callbacks = NULL, validation_data = NULL, validation_steps = NULL,
  class_weight = NULL, max_q_size = 10, workers = 1,
  pickle_safe = FALSE, initial_epoch = 0)
}
\arguments{
\item{model}{Model to train.}

\item{generator}{Generator that yields training batches}

\item{steps_per_epoch}{}

\item{epochs}{Number of times to iterate over the training data arrays.}

\item{verbose}{Verbosity mode (0 = silent, 1 = verbose, 2 = one log line per
epoch).}

\item{callbacks}{List of callbacks to be called during training.}

\item{validation_data}{Data on which to evaluate the loss and any model
metrics at the end of each epoch. The model will not be trained on this
data. This could be a list (x_val, y_val) or a list (x_val, y_val,
val_sample_weights).}

\item{class_weight}{Optional named list mapping indices (integers) to a
weight (float) to apply to the model's loss for the samples from this class
during training. This can be useful to tell the model to "pay more
attention" to samples from an under-represented class.}

\item{initial_epoch}{epoch at which to start training (useful for resuming a
previous training run).}
}
\value{
Training history object (invisibly)
}
\description{
The generator is run in parallel to the model, for efficiency.
For instance, this allows you to do real-time data augmentation
on images on CPU in parallel to training your model on GPU.
}
\seealso{
Other model functions: \code{\link{compile}},
  \code{\link{evaluate_generator}}, \code{\link{evaluate}},
  \code{\link{fit}}, \code{\link{get_config}},
  \code{\link{keras_model_sequential}},
  \code{\link{keras_model}},
  \code{\link{predict_generator}},
  \code{\link{predict_on_batch}},
  \code{\link{predict_proba}}, \code{\link{predict}},
  \code{\link{summary}}, \code{\link{train_on_batch}}
}
